{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Programming/Projects/barcode-generator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Barcode from 'react-barcode';\nimport logo from \"./logo.svg\";\nimport { text } from './text-sample';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst re1 = /[\\d]{0,3}[\\w]{0,2}[\\d]{7,}/g;\n\nfunction Base64DecodeUrl(str) {\n  str = str ? (str + '===').slice(0, str.length + str.length % 4) : '';\n  return str.replace(/-/g, '+').replace(/_/g, '/');\n}\n\n_c = Base64DecodeUrl;\nconst letterToNumber = {\n  A: 8,\n  B: 8,\n  C: 0,\n  D: 0,\n  E: 8,\n  F: 8,\n  G: 0,\n  H: 8,\n  I: 1,\n  J: 0,\n  K: 8,\n  L: 1,\n  M: 0,\n  N: 8,\n  O: 0,\n  P: 2,\n  Q: 0,\n  R: 8,\n  S: 5,\n  T: 7,\n  U: 0,\n  V: 0,\n  W: 0,\n  X: 0,\n  Y: 1,\n  Z: 0\n};\n\nfunction replaceLettersWithLikelyDigits(str) {\n  return str.split('').map(digit => {\n    if (isNaN(Number(digit))) {\n      console.log(digit);\n      return letterToNumber[digit];\n    } else return digit;\n  }).join('');\n}\n\nfunction BarcodeContainer({\n  UPC,\n  index\n}) {\n  _s();\n\n  const [currentUPC, setCurrentUPC] = React.useState(() => {});\n  const navUp = `#upc${index - 1}`;\n  const navDown = `#upc${index + 1}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: `upc${index}`,\n    className: \"upc\",\n    children: [/*#__PURE__*/_jsxDEV(Barcode, {\n      width: 3,\n      height: 500,\n      format: 'CODE128',\n      displayValue: false,\n      background: '#ffffff',\n      lineColor: '#000000',\n      margin: 10,\n      value: UPC\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: UPC\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: navUp,\n        children: \"up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: navDown,\n        children: \"down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }, this);\n}\n\n_s(BarcodeContainer, \"J1hNMu/MtcAFihzrB+kX3ivqjKo=\");\n\n_c2 = BarcodeContainer;\n\nfunction App() {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const URLEncodedText = urlParams.get('text');\n  const base64EncodedText = Base64DecodeUrl(URLEncodedText); // const text = atob(base64EncodedText)\n\n  const matches = text.match(re1);\n  const fixedMatches = matches ? matches.map(match => {\n    if (match.length >= 12) {\n      if (/\\d{12}/.test(match)) {\n        return match;\n      } else {\n        return replaceLettersWithLikelyDigits(match);\n      }\n    } else {\n      return '';\n    }\n  }).filter(match => match) : [];\n  return matches ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: fixedMatches.map((match, i) => /*#__PURE__*/_jsxDEV(BarcodeContainer, {\n      UPC: match,\n      index: i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"no matches found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n}\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Base64DecodeUrl\");\n$RefreshReg$(_c2, \"BarcodeContainer\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/src/App.js"],"names":["Barcode","text","useState","re1","Base64DecodeUrl","str","slice","length","replace","letterToNumber","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","replaceLettersWithLikelyDigits","split","map","digit","isNaN","Number","console","log","join","BarcodeContainer","UPC","index","currentUPC","setCurrentUPC","React","navUp","navDown","width","height","format","displayValue","background","lineColor","margin","App","queryString","window","location","search","urlParams","URLSearchParams","URLEncodedText","get","base64EncodedText","matches","match","fixedMatches","test","filter","i"],"mappings":";;;AAAA,OAAO,WAAP;AAEA,OAAOA,OAAP,MAAoB,eAApB;;AAEA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,GAAG,GAAG,6BAAZ;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC7BA,EAAAA,GAAG,GAAGA,GAAG,GAAG,CAACA,GAAG,GAAG,KAAP,EAAcC,KAAd,CAAoB,CAApB,EAAuBD,GAAG,CAACE,MAAJ,GAAcF,GAAG,CAACE,MAAJ,GAAa,CAAlD,CAAH,GAA2D,EAApE;AACA,SAAOF,GAAG,CAACG,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,EAAuBA,OAAvB,CAA+B,IAA/B,EAAqC,GAArC,CAAP;AACA;;KAHQJ,e;AAKT,MAAMK,cAAc,GAAG;AACtBC,EAAAA,CAAC,EAAE,CADmB;AAEtBC,EAAAA,CAAC,EAAE,CAFmB;AAGtBC,EAAAA,CAAC,EAAE,CAHmB;AAItBC,EAAAA,CAAC,EAAE,CAJmB;AAKtBC,EAAAA,CAAC,EAAE,CALmB;AAMtBC,EAAAA,CAAC,EAAE,CANmB;AAOtBC,EAAAA,CAAC,EAAE,CAPmB;AAQtBC,EAAAA,CAAC,EAAE,CARmB;AAStBC,EAAAA,CAAC,EAAE,CATmB;AAUtBC,EAAAA,CAAC,EAAE,CAVmB;AAWtBC,EAAAA,CAAC,EAAE,CAXmB;AAYtBC,EAAAA,CAAC,EAAE,CAZmB;AAatBC,EAAAA,CAAC,EAAE,CAbmB;AActBC,EAAAA,CAAC,EAAE,CAdmB;AAetBC,EAAAA,CAAC,EAAE,CAfmB;AAgBtBC,EAAAA,CAAC,EAAE,CAhBmB;AAiBtBC,EAAAA,CAAC,EAAE,CAjBmB;AAkBtBC,EAAAA,CAAC,EAAE,CAlBmB;AAmBtBC,EAAAA,CAAC,EAAE,CAnBmB;AAoBtBC,EAAAA,CAAC,EAAE,CApBmB;AAqBtBC,EAAAA,CAAC,EAAE,CArBmB;AAsBtBC,EAAAA,CAAC,EAAE,CAtBmB;AAuBtBC,EAAAA,CAAC,EAAE,CAvBmB;AAwBtBC,EAAAA,CAAC,EAAE,CAxBmB;AAyBtBC,EAAAA,CAAC,EAAE,CAzBmB;AA0BtBC,EAAAA,CAAC,EAAE;AA1BmB,CAAvB;;AA6BA,SAASC,8BAAT,CAAwC/B,GAAxC,EAA6C;AAC5C,SAAOA,GAAG,CACRgC,KADK,CACC,EADD,EAELC,GAFK,CAEAC,KAAD,IAAW;AACf,QAAIC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAT,EAA0B;AACzBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,aAAO9B,cAAc,CAAC8B,KAAD,CAArB;AACA,KAHD,MAGO,OAAOA,KAAP;AACP,GAPK,EAQLK,IARK,CAQA,EARA,CAAP;AASA;;AAED,SAASC,gBAAT,CAA0B;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAA1B,EAA0C;AAAA;;AACzC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,KAAK,CAAChD,QAAN,CAAe,MAAM,CAAE,CAAvB,CAApC;AACA,QAAMiD,KAAK,GAAI,OAAMJ,KAAK,GAAG,CAAE,EAA/B;AACA,QAAMK,OAAO,GAAI,OAAML,KAAK,GAAG,CAAE,EAAjC;AACA,sBACC;AAAiB,IAAA,EAAE,EAAG,MAAKA,KAAM,EAAjC;AAAoC,IAAA,SAAS,EAAC,KAA9C;AAAA,4BACC,QAAC,OAAD;AAEEM,MAAAA,KAAK,EAAE,CAFT;AAGEC,MAAAA,MAAM,EAAE,GAHV;AAIEC,MAAAA,MAAM,EAAE,SAJV;AAKEC,MAAAA,YAAY,EAAE,KALhB;AAMEC,MAAAA,UAAU,EAAE,SANd;AAOEC,MAAAA,SAAS,EAAE,SAPb;AAQEC,MAAAA,MAAM,EAAE,EARV;AAUC,MAAA,KAAK,EAAEb;AAVR;AAAA;AAAA;AAAA;AAAA,YADD,eAaC;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEA;AAA1B;AAAA;AAAA;AAAA;AAAA,YAbD,eAcC;AAAA,8BACC;AAAG,QAAA,IAAI,EAAEK,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAG,QAAA,IAAI,EAAEC,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YAdD;AAAA,KAAUL,KAAV;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA;;GAzBQF,gB;;MAAAA,gB;;AA2BT,SAASe,GAAT,GAAe;AACd,QAAMC,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAApC;AACA,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBL,WAApB,CAAlB;AACA,QAAMM,cAAc,GAAGF,SAAS,CAACG,GAAV,CAAc,MAAd,CAAvB;AACA,QAAMC,iBAAiB,GAAGjE,eAAe,CAAC+D,cAAD,CAAzC,CAJc,CAKd;;AACA,QAAMG,OAAO,GAAGrE,IAAI,CAACsE,KAAL,CAAWpE,GAAX,CAAhB;AACA,QAAMqE,YAAY,GAAGF,OAAO,GACzBA,OAAO,CACNhC,GADD,CACMiC,KAAD,IAAW;AACf,QAAIA,KAAK,CAAChE,MAAN,IAAgB,EAApB,EAAwB;AACvB,UAAI,SAASkE,IAAT,CAAcF,KAAd,CAAJ,EAA0B;AACzB,eAAOA,KAAP;AACA,OAFD,MAEO;AACN,eAAOnC,8BAA8B,CAACmC,KAAD,CAArC;AACA;AACD,KAND,MAMO;AACN,aAAO,EAAP;AACA;AACD,GAXD,EAYCG,MAZD,CAYSH,KAAD,IAAWA,KAZnB,CADyB,GAczB,EAdH;AAgBA,SAAOD,OAAO,gBACb;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACEE,YAAY,CAAClC,GAAb,CAAiB,CAACiC,KAAD,EAAQI,CAAR,kBACjB,QAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEJ,KAAvB;AAAsC,MAAA,KAAK,EAAEI;AAA7C,OAAmCA,CAAnC;AAAA;AAAA;AAAA;AAAA,YADA;AADF;AAAA;AAAA;AAAA;AAAA,UADa,gBAOb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPD;AASA;;MAhCQf,G;AAkCT,eAAeA,GAAf","sourcesContent":["import './App.css'\n\nimport Barcode from 'react-barcode'\nimport logo from './logo.svg'\nimport { text } from './text-sample'\nimport { useState } from 'react'\n\nconst re1 = /[\\d]{0,3}[\\w]{0,2}[\\d]{7,}/g\n\nfunction Base64DecodeUrl(str) {\n\tstr = str ? (str + '===').slice(0, str.length + (str.length % 4)) : ''\n\treturn str.replace(/-/g, '+').replace(/_/g, '/')\n}\n\nconst letterToNumber = {\n\tA: 8,\n\tB: 8,\n\tC: 0,\n\tD: 0,\n\tE: 8,\n\tF: 8,\n\tG: 0,\n\tH: 8,\n\tI: 1,\n\tJ: 0,\n\tK: 8,\n\tL: 1,\n\tM: 0,\n\tN: 8,\n\tO: 0,\n\tP: 2,\n\tQ: 0,\n\tR: 8,\n\tS: 5,\n\tT: 7,\n\tU: 0,\n\tV: 0,\n\tW: 0,\n\tX: 0,\n\tY: 1,\n\tZ: 0,\n}\n\nfunction replaceLettersWithLikelyDigits(str) {\n\treturn str\n\t\t.split('')\n\t\t.map((digit) => {\n\t\t\tif (isNaN(Number(digit))) {\n\t\t\t\tconsole.log(digit)\n\t\t\t\treturn letterToNumber[digit]\n\t\t\t} else return digit\n\t\t})\n\t\t.join('')\n}\n\nfunction BarcodeContainer({ UPC, index }) {\n\tconst [currentUPC, setCurrentUPC] = React.useState(() => {})\n\tconst navUp = `#upc${index - 1}`\n\tconst navDown = `#upc${index + 1}`\n\treturn (\n\t\t<div key={index} id={`upc${index}`} className='upc'>\n\t\t\t<Barcode\n\t\t\t\t{...{\n\t\t\t\t\twidth: 3,\n\t\t\t\t\theight: 500,\n\t\t\t\t\tformat: 'CODE128',\n\t\t\t\t\tdisplayValue: false,\n\t\t\t\t\tbackground: '#ffffff',\n\t\t\t\t\tlineColor: '#000000',\n\t\t\t\t\tmargin: 10,\n\t\t\t\t}}\n\t\t\t\tvalue={UPC}\n\t\t\t/>\n\t\t\t<input type='text' value={UPC} />\n\t\t\t<nav>\n\t\t\t\t<a href={navUp}>up</a>\n\t\t\t\t<a href={navDown}>down</a>\n\t\t\t</nav>\n\t\t</div>\n\t)\n}\n\nfunction App() {\n\tconst queryString = window.location.search\n\tconst urlParams = new URLSearchParams(queryString)\n\tconst URLEncodedText = urlParams.get('text')\n\tconst base64EncodedText = Base64DecodeUrl(URLEncodedText)\n\t// const text = atob(base64EncodedText)\n\tconst matches = text.match(re1)\n\tconst fixedMatches = matches\n\t\t? matches\n\t\t\t\t.map((match) => {\n\t\t\t\t\tif (match.length >= 12) {\n\t\t\t\t\t\tif (/\\d{12}/.test(match)) {\n\t\t\t\t\t\t\treturn match\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn replaceLettersWithLikelyDigits(match)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn ''\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter((match) => match)\n\t\t: []\n\n\treturn matches ? (\n\t\t<div className='App'>\n\t\t\t{fixedMatches.map((match, i) => (\n\t\t\t\t<BarcodeContainer UPC={match} key={i} index={i}></BarcodeContainer>\n\t\t\t))}\n\t\t</div>\n\t) : (\n\t\t<h1>no matches found</h1>\n\t)\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}