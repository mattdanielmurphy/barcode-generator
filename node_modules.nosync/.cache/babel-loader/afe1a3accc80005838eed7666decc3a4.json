{"ast":null,"code":"const fetch = require('node-fetch');\n\nconst CSV = {\n  parse: require('csv-parse/lib/sync'),\n  stringify: require('csv-stringify/lib/sync')\n};\n\nconst YAML = require('yamljs');\n\nconst Response = require('./lib/response.js');\n\nconst Util = require('./lib/util.js');\n\nconst GitPath = require('./lib/gitpath.js');\n\nmodule.exports = class Gitrows {\n  constructor(options) {\n    this._defaults();\n\n    this.options(options);\n    this._cache = {};\n  }\n\n  _defaults() {\n    const defaults = {\n      ns: 'github',\n      branch: 'master',\n      message: 'GitRows API Post (https://gitrows.com)',\n      author: {\n        name: \"GitRows\",\n        email: \"api@gitrows.com\"\n      },\n      csv: {\n        delimiter: \",\"\n      },\n      strict: false,\n      default: null\n    };\n    this._cache = {};\n    Object.keys(this).forEach(key => delete this[key]);\n    this.options(defaults);\n    return this;\n  }\n\n  reset() {\n    return this._defaults();\n  }\n\n  pull(path) {\n    let self = this;\n    return new Promise(function (resolve, reject) {\n      let headers = {};\n      const pathData = GitPath.parse(path) || {};\n      if (!pathData.path) reject(Response(400));\n      self.options(pathData);\n      if (!GitPath.isValid(self.options())) reject(Response(400));\n      if (self.user !== undefined && self.token !== undefined && self.ns == 'github') headers[\"Authorization\"] = \"Basic \" + Util.btoa(self.user + \":\" + self.token);\n      let url = GitPath.toApi(self.options());\n      if (self.ns == 'gitlab') url += \"?ref=\" + self.branch;\n      fetch(url, {\n        headers: headers\n      }).then(r => {\n        if (!r.ok) reject(Response(r.status));\n        resolve(r.json());\n      }).catch(e => console.error('Error:', e));\n    });\n  }\n\n  push(path, obj, sha, method = 'PUT') {\n    let self = this;\n    return new Promise(function (resolve, reject) {\n      if (!self.token) reject(Response(401));\n      const pathData = GitPath.parse(path) || {};\n      if (!pathData.path) reject(Response(400));\n      self.options(pathData);\n      if (!GitPath.isValid(self.options())) reject(Response(400));\n      let data = {\n        \"branch\": self.branch\n      };\n      if (typeof obj != 'undefined' && obj) data.content = Util.btoa(Gitrows._stringify(obj, self.type));\n      if (typeof sha != 'undefined') data.sha = sha;\n      let headers = {\n        'Content-Type': 'application/json'\n      };\n\n      switch (self.ns) {\n        case 'gitlab':\n          headers['Authorization'] = \"Bearer \" + self.token;\n          data.encoding = 'base64';\n          data.commit_message = self.message;\n          data.author_name = self.author.name;\n          data.author_email = self.author.email;\n          break;\n\n        default:\n          headers['Authorization'] = \"Basic \" + Util.btoa(self.user + \":\" + self.token);\n          data.message = self.message;\n          data.committer = self.author;\n      }\n\n      let url = GitPath.toApi(self.options());\n      fetch(url, {\n        method: method,\n        headers: headers,\n        body: JSON.stringify(data)\n      }).then(r => {\n        if (!r.ok) reject(Response(r.status));\n        resolve(Response(r.status));\n      }).catch(e => console.error('Error:', e));\n    });\n  }\n\n  create(path, obj = {}) {\n    let method = this.ns == 'gitlab' ? \"POST\" : \"PUT\";\n    return this.push(path, obj, null, method);\n  }\n\n  drop(path) {\n    let self = this;\n    if (self.ns == 'github') return self.pull(path).then(d => self.push(path, null, d.sha, 'DELETE'));\n    return self.push(path, null, null, 'DELETE');\n  }\n\n  get(path, query, method) {\n    let self = this;\n    self._meta = {};\n    self._data = null;\n    return new Promise(function (resolve, reject) {\n      const pathData = GitPath.parse(path) || {};\n      if (!pathData.path) reject(Response(400));\n      self.options(pathData);\n      if (!GitPath.isValid(self.options())) reject(Response(400));\n\n      if (pathData.resource) {\n        query = query || {};\n        query.id = pathData.resource;\n      }\n\n      const url = GitPath.toUrl(self.options(), true);\n      self._meta.repository = {\n        url: url,\n        name: pathData.repo,\n        owner: pathData.owner,\n        ns: pathData.ns || 'github'\n      };\n      self._meta.file = {\n        type: pathData.type,\n        mime: Util.mime(pathData.type)\n      };\n      return self._pullOrFetch(url, method).then(t => {\n        let data = Gitrows._parse(t, self.type);\n\n        if (data) self._meta.count = {\n          total: data.length || 0\n        };\n\n        if (data && typeof query != 'undefined') {\n          data = Gitrows._applyFilters(data, query);\n          self._meta.count.query = data.length || 0;\n        }\n\n        self._data = data;\n        resolve(data);\n      }).catch(f => console.log(f));\n    });\n  }\n\n  put(path, data) {\n    let self = this,\n        base = [],\n        columns;\n    return new Promise(function (resolve, reject) {\n      self.pull(path).then(d => {\n        base = Gitrows._parse(Util.atob(d.content), self.type);\n\n        if (self.strict) {\n          self.columns = self.columns || Util.columns(base);\n          data = Util.columnsApply(data, self.columns, self.default);\n        }\n\n        if (!Array.isArray(base)) base = [base];\n        if (Array.isArray(data)) base.push(...data);else base.push(data);\n        self.push(path, base, d.sha).then(r => resolve(r)).catch(e => reject(e));\n      }).catch(f => {\n        base = data;\n        self.push(path, base).then(r => resolve(r)).catch(e => reject(e));\n      });\n    });\n  }\n\n  update(path, data, query) {\n    let self = this,\n        base = [],\n        columns;\n    const pathData = GitPath.parse(path) || {};\n    return new Promise(function (resolve, reject) {\n      self.pull(path).then(d => {\n        base = Gitrows._parse(Util.atob(d.content), self.type);\n\n        if (self.strict) {\n          self.columns = self.columns || Util.columns(base);\n          base = Util.columnsApply(base, self.columns, self.default);\n        }\n\n        if (pathData.resource) {\n          query = query || {};\n          query.id = pathData.resource;\n        }\n\n        if (typeof query == 'undefined') resolve(Response(304));\n        if (!Array.isArray(base)) base = [base];\n        base = Util.valuesApply(base, data, query);\n        self.push(path, base, d.sha).then(r => resolve(Response(202))).catch(e => e);\n      });\n    });\n  }\n\n  replace(path, data) {\n    let self = this,\n        base = [],\n        columns;\n    const pathData = GitPath.parse(path) || {};\n    return new Promise(function (resolve, reject) {\n      self.pull(path).then(d => {\n        self.push(path, data, d.sha).then(r => resolve(Response(202))).catch(e => e);\n      });\n    });\n  }\n\n  delete(path, query) {\n    let self = this,\n        base = [];\n    return new Promise(function (resolve, reject) {\n      const pathData = GitPath.parse(path);\n      self.options(pathData);\n\n      if (pathData.resource) {\n        query = query || {};\n        query.id = pathData.resource;\n      }\n\n      ;\n      if (typeof query == 'undefined') resolve(Response(304));\n      self.pull(pathData).then(d => {\n        base = Gitrows._parse(Util.atob(d.content), self.type);\n        const diff = Util.where(base, query);\n        const data = base.filter(x => !diff.includes(x));\n        if (JSON.stringify(base) !== JSON.stringify(data)) self.push(path, data, d.sha).then(r => resolve(Response(204))).catch(e => e);\n      });\n    });\n  }\n\n  columns(path) {\n    return this.get(path).then(data => Util.columns(data));\n  }\n\n  types(path, query) {\n    return this.get(path, query).then(data => Util.types(data));\n  }\n\n  options(obj) {\n    let self = this;\n    const allowed = ['server', 'ns', 'owner', 'repo', 'branch', 'path', 'user', 'token', 'message', 'author', 'csv', 'type', 'columns', 'strict', 'default'];\n\n    if (typeof obj == 'undefined') {\n      let data = {};\n      allowed.forEach((item, i) => {\n        data[item] = this[item];\n      });\n      return data;\n    }\n\n    for (let key in obj) {\n      if (allowed.includes(key) && typeof obj[key] !== 'undefined') this[key] = obj[key];\n    }\n\n    return self;\n  }\n\n  async test(path, constraint = {}) {\n    let result = GitPath.parse(path) || {};\n\n    if (!result.valid) {\n      if (result.repo && constraint.fragment !== false && constraint.file !== true) result.fragment = true;else return { ...result,\n        ...Response(400)\n      };\n    } else result.fragment = false;\n\n    const acl = await this._acl(path).then(r => r).catch(e => e);\n    result = { ...result,\n      ...acl\n    };\n\n    if (acl.code) {\n      result.valid = false;\n      result.level = 'repo';\n      return { ...result,\n        ...Response(acl.code)\n      };\n    } else {\n      result.valid = result.fragment;\n      result = { ...result,\n        ...result.permissions\n      };\n      delete result.permissions;\n    }\n\n    if (!result.fragment) {\n      const file = await this._isRepoFile(path).then(r => r).catch(e => e);\n      result.valid = file === true;\n      result.level = 'file';\n      result = { ...result,\n        ...Response(file === true ? 200 : 404)\n      };\n    }\n\n    Object.keys(constraint).forEach((item, i) => {\n      if (result[item] !== constraint[item]) {\n        result.valid = false;\n        if (result.message && Array.isArray(result.message.description)) result.message.description.push(`Constraint Violation - ${item} must not be ${result[item]}`);else result = { ...result,\n          ...Response(400, {\n            description: [`Constraint Violation - ${item} must not be ${result[item]}`]\n          })\n        };\n      }\n    });\n    return result;\n  }\n\n  _acl(path) {\n    let self = this;\n    const test = GitPath.parse(path) || {};\n    if (!test.repo) return Promise.reject(Response(404));\n    if (test.ns != 'github') return Promise.reject(Response(501));\n    const hash = `acl:${test.ns}:${test.owner}:${test.repo}`;\n    if (typeof self._cache[hash] != 'undefined') return new Promise((resolve, reject) => self._cache[hash] ? resolve(self._cache[hash]) : reject(Response(404)));\n    let headers = {\n      'Content-Type': 'application/json'\n    };\n    if (self.user && self.token) headers['Authorization'] = \"Basic \" + Util.btoa(self.user + \":\" + self.token);\n    return fetch(\"https://api.github.com/repos/\" + test.owner + '/' + test.repo, {\n      headers: headers\n    }).then(r => {\n      if (!r.ok) {\n        self._cache[hash] = null;\n        return Response(404);\n      }\n\n      return r.json().then(data => {\n        const acl = {\n          'private': data.private,\n          'permissions': data.permissions\n        };\n        self._cache[hash] = acl;\n        return acl;\n      });\n    }).then(r => r).catch(e => e);\n  }\n\n  _listPushableRepos(ns, owner, grouped) {\n    const self = this;\n    if (typeof ns == 'undefined') return Promise.reject(Response(400));\n    ns = ns.replace('@', '');\n    if (typeof owner == 'undefined') [ns, owner] = ns.split('/');\n    if (ns != 'github') return Promise.reject(Response(400));\n    if (!self.user || !self.token) return Promise.reject(Response(403));\n    const hash = `repos:${ns}:${owner}:${!!grouped}`;\n    if (typeof self._cache[hash] != 'undefined') return new Promise((resolve, reject) => self._cache[hash] ? resolve(self._cache[hash]) : reject(Response(404)));\n    let headers = {\n      'Content-Type': 'application/json',\n      'Authorization': \"Basic \" + Util.btoa(self.user + \":\" + self.token)\n    };\n    return fetch(\"https://api.github.com/user/repos?per_page=100\", {\n      headers: headers\n    }).then(r => {\n      if (!r.ok) {\n        self._cache[hash] = null;\n        return Response(404);\n      }\n\n      return r.json().then(r => {\n        self._cache[`raw:repos:${ns}:${owner}`] = r;\n        let repos;\n\n        if (!!grouped) {\n          repos = {};\n          r.map(i => repos[i.owner.login] = {\n            avatar: i.owner.avatar_url,\n            type: i.owner.type,\n            login: i.owner.login\n          });\n          Object.keys(repos).forEach((item, i) => {\n            repos[item]['repos'] = r.filter(f => f.permissions.push && f.owner.login == item).map(r => `@${ns}/${r.full_name}`);\n          });\n          repos = typeof owner != 'undefined' ? repos[owner] : repos;\n          self._cache[hash] = repos;\n          return repos;\n        }\n\n        repos = r.filter(f => f.permissions.push).map(r => `@${ns}/${r.full_name}`);\n        if (typeof owner != 'undefined') repos = repos.filter(r => ~r.indexOf(`@${ns}/${owner}/`));\n        self._cache[hash] = repos;\n        return repos;\n      });\n    }).then(r => r).catch(e => e);\n  }\n\n  _listRepoContents(ns, owner, repo) {\n    let self = this;\n    let test = GitPath.parse(ns);\n\n    if (test.repo) {\n      ns = test.ns;\n      owner = test.owner;\n      repo = test.repo;\n    }\n\n    if (!ns || !owner || !repo) return Promise.reject(Response(400));\n    if (ns != 'github') return Promise.reject(Response(501));\n    const hash = `files:${ns}:${owner}:${repo}`;\n    if (typeof self._cache[hash] != 'undefined') return new Promise((resolve, reject) => self._cache[hash] ? resolve(self._cache[hash]) : reject(Response(404)));\n    let headers = {\n      'Content-Type': 'application/json'\n    };\n    if (self.user && self.token) headers['Authorization'] = \"Basic \" + Util.btoa(self.user + \":\" + self.token);\n    return fetch(\"https://api.github.com/repos/\" + owner + '/' + repo + '/git/trees/master?recursive=1', {\n      headers: headers\n    }).then(r => {\n      if (!r.ok) {\n        self._cache[hash] = null;\n        return Response(404);\n      }\n\n      return r.json().then(data => {\n        if (typeof data.tree == 'undefined' || !Array.isArray(data.tree)) return Response(404);\n        let contents = [];\n        data.tree.forEach((item, i) => {\n          contents.push(item.path);\n        });\n        self._cache[hash] = contents;\n        return contents;\n      });\n    }).then(r => r).catch(e => e);\n  }\n\n  _isRepoFile(path) {\n    let self = this;\n    const test = GitPath.parse(path) || {};\n    return self._listRepoContents(path).then(c => c.findIndex(item => test.path.toLowerCase() === item.toLowerCase()) > -1).catch(e => e);\n  }\n\n  _getRepoTree(ns, owner, repo) {\n    let self = this;\n    return self._listRepoContents(ns, owner, repo).then(c => {\n      let result = {};\n      c.forEach(p => p.split('/').reduce((o, k) => o[k] = o[k] || {}, result));\n      return result;\n    }).catch(e => e);\n  }\n\n  static _applyFilters(data, query) {\n    data = Util.where(data, query);\n    let aggregates = Object.keys(query).filter(key => key.startsWith('$')).reduce((obj, key) => {\n      obj[key] = query[key];\n      return obj;\n    }, {});\n    if (Object.keys(aggregates).length) data = Util.aggregate(data, aggregates);\n    return data;\n  }\n\n  static _stringify(obj, type = 'json') {\n    try {\n      switch (type.toLowerCase()) {\n        case 'csv':\n          return Array.isArray(obj) ? CSV.stringify(obj, {\n            header: true\n          }) : null;\n          break;\n\n        case 'yaml':\n          return YAML.stringify(obj, 10);\n          break;\n\n        default:\n          return JSON.stringify(obj, null, 2);\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  static _parse(content, type = 'json') {\n    type = type.toLowerCase();\n\n    try {\n      switch (type) {\n        case 'csv':\n          return CSV.parse(content, {\n            columns: true,\n            skip_empty_lines: true,\n            cast: true\n          });\n          break;\n\n        case 'yaml':\n          return YAML.parse(content);\n          break;\n\n        default:\n          return JSON.parse(content);\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  _pullOrFetch(url, method = 'fetch') {\n    let self = this;\n\n    if (method == 'pull') {\n      return self.pull(GitPath.fromUrl(url)).then(p => {\n        self._meta.repository.private = true;\n        return Util.atob(p.content);\n      }).catch(e => e);\n    }\n\n    return fetch(url).then(r => {\n      if (r.ok) {\n        self._meta.repository.private = false;\n        return r.text();\n      }\n\n      ; //retry by api if token is present\n\n      if (self.user !== undefined && self.token !== undefined && self.ns == 'github') {\n        return self.pull(GitPath.fromUrl(url)).then(p => {\n          self._meta.repository.private = true;\n          return Util.atob(p.content);\n        }).catch(e => e);\n      }\n\n      return Response(r.status);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/gitrows/gitrows.js"],"names":["fetch","require","CSV","parse","stringify","YAML","Response","Util","GitPath","module","exports","Gitrows","constructor","options","_defaults","_cache","defaults","ns","branch","message","author","name","email","csv","delimiter","strict","default","Object","keys","forEach","key","reset","pull","path","self","Promise","resolve","reject","headers","pathData","isValid","user","undefined","token","btoa","url","toApi","then","r","ok","status","json","catch","e","console","error","push","obj","sha","method","data","content","_stringify","type","encoding","commit_message","author_name","author_email","committer","body","JSON","create","drop","d","get","query","_meta","_data","resource","id","toUrl","repository","repo","owner","file","mime","_pullOrFetch","t","_parse","count","total","length","_applyFilters","f","log","put","base","columns","atob","columnsApply","Array","isArray","update","valuesApply","replace","delete","diff","where","filter","x","includes","types","allowed","item","i","test","constraint","result","valid","fragment","acl","_acl","code","level","permissions","_isRepoFile","description","hash","private","_listPushableRepos","grouped","split","repos","map","login","avatar","avatar_url","full_name","indexOf","_listRepoContents","tree","contents","c","findIndex","toLowerCase","_getRepoTree","p","reduce","o","k","aggregates","startsWith","aggregate","header","skip_empty_lines","cast","fromUrl","text"],"mappings":"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","sourcesContent":["const fetch=require('node-fetch');\n\nconst CSV = {\n\tparse:require('csv-parse/lib/sync'),\n\tstringify: require('csv-stringify/lib/sync')\n};\nconst YAML = require('yamljs');\n\nconst Response=require('./lib/response.js');\nconst Util=require('./lib/util.js');\nconst GitPath=require('./lib/gitpath.js');\n\nmodule.exports=class Gitrows{\n\tconstructor(options){\n\t\tthis._defaults();\n\t\tthis.options(options);\n\t\tthis._cache={};\n\t}\n\t_defaults(){\n\t\tconst defaults={\n\t\t\tns:'github',\n\t\t\tbranch:'master',\n\t\t\tmessage:'GitRows API Post (https://gitrows.com)',\n\t\t\tauthor:{name:\"GitRows\",email:\"api@gitrows.com\"},\n\t\t\tcsv:{delimiter:\",\"},\n\t\t\tstrict:false,\n\t\t\tdefault:null\n\t\t};\n\t\tthis._cache={};\n\t\tObject.keys(this).forEach(key=>delete this[key]);\n\t\tthis.options(defaults);\n\t\treturn this;\n\t}\n\treset(){\n\t\treturn this._defaults();\n\t}\n\tpull(path){\n\t\tlet self=this;\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tlet headers={};\n\t\t\tconst pathData=GitPath.parse(path)||{};\n\t\t\tif (!pathData.path) reject(Response(400));\n\t\t\tself.options(pathData);\n\t\t\tif(!GitPath.isValid(self.options())) reject(Response(400));\n\t\t\tif (self.user!==undefined&&self.token!==undefined&&self.ns=='github')\n\t\t\t\theaders[\"Authorization\"]=\"Basic \"+Util.btoa(self.user+\":\"+self.token);\n\t\t\tlet url=GitPath.toApi(self.options());\n\t\t\tif (self.ns=='gitlab') url+=\"?ref=\"+self.branch;\n\t\t\tfetch(url,{\n\t\t\t\theaders: headers,\n\t\t\t})\n\t\t\t.then(r=>{\n\t\t\t\tif (!r.ok) reject(Response(r.status));\n\t\t\t\tresolve(r.json())}\n\t\t\t)\n\t\t\t.catch((e) => console.error('Error:', e));\n\t\t});\n\t}\n\tpush(path,obj,sha,method='PUT'){\n\t\t\tlet self=this;\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tif (!self.token) reject(Response(401));\n\t\t\t\tconst pathData=GitPath.parse(path)||{};\n\t\t\t\tif (!pathData.path) reject(Response(400));\n\t\t\t\tself.options(pathData);\n\t\t\t\tif(!GitPath.isValid(self.options())) reject(Response(400));\n\t\t\t\tlet data={\n\t\t\t\t\t\"branch\":self.branch\n\t\t\t\t};\n\t\t\t\tif (typeof obj!='undefined'&&obj)\n\t\t\t\t\tdata.content=Util.btoa(Gitrows._stringify(obj,self.type));\n\t\t\t\tif (typeof sha!='undefined')\n\t\t\t\t\tdata.sha=sha;\n\t\t\t\tlet headers={\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t};\n\t\t\t\tswitch (self.ns) {\n\t\t\t\t\tcase 'gitlab':\n\t\t\t\t\t\theaders['Authorization']=\"Bearer \"+self.token;\n\t\t\t\t\t\tdata.encoding='base64';\n\t\t\t\t\t\tdata.commit_message=self.message;\n\t\t\t\t\t\tdata.author_name=self.author.name;\n\t\t\t\t\t\tdata.author_email=self.author.email;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\theaders['Authorization']=\"Basic \" + Util.btoa(self.user + \":\" + self.token);\n\t\t\t\t\t\tdata.message=self.message;\n\t\t\t\t\t\tdata.committer=self.author;\n\t\t\t\t}\n\t\t\t\tlet url=GitPath.toApi(self.options());\n\t\t\t\tfetch(url,{\n\t\t\t\t\tmethod:method,\n\t\t\t\t\theaders: headers,\n\t\t\t\t\tbody:JSON.stringify(data),\n\t\t\t\t})\n\t\t\t\t.then(r=>{\n\t\t\t\t\tif (!r.ok) reject(Response(r.status));\n\t\t\t\t\tresolve(Response(r.status));\n\t\t\t\t})\n\t\t\t\t.catch((e) => console.error('Error:', e));\n\t\t\t});\n\t}\n\tcreate(path,obj={}){\n\t\tlet method=this.ns=='gitlab'?\"POST\":\"PUT\";\n\t\treturn this.push(path,obj,null,method);\n\t}\n\tdrop(path){\n\t\tlet self=this;\n\t\tif (self.ns=='github')\n\t\t\t\treturn self.pull(path).then(d=>self.push(path,null,d.sha,'DELETE'));\n\t\treturn self.push(path,null,null,'DELETE');\n\t}\n\tget(path,query,method){\n\t\tlet self=this;\n\t\tself._meta={};\n\t\tself._data=null;\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tconst pathData=GitPath.parse(path)||{};\n\t\t\tif (!pathData.path) reject(Response(400));\n\t\t\tself.options(pathData);\n\t\t\tif(!GitPath.isValid(self.options())) reject(Response(400));\n\t\t\tif (pathData.resource){\n\t\t\t\tquery=query||{};\n\t\t\t\tquery.id=pathData.resource;\n\t\t\t}\n\t\t\tconst url=GitPath.toUrl(self.options(),true);\n\t\t\tself._meta.repository={url:url,name:pathData.repo,owner:pathData.owner,ns:pathData.ns||'github'};\n\t\t\tself._meta.file={type:pathData.type,mime:Util.mime(pathData.type)};\n\t\t\treturn self._pullOrFetch(url, method)\n\t\t\t.then(t=>{\n\t\t\t\tlet data=Gitrows._parse(t,self.type);\n\t\t\t\tif (data)\n\t\t\t\t\tself._meta.count={total:data.length||0};\n\t\t\t\tif (data&&typeof query != 'undefined'){\n\t\t\t\t\tdata=Gitrows._applyFilters(data,query);\n\t\t\t\t\tself._meta.count.query=data.length||0;\n\t\t\t\t}\n\t\t\t\tself._data=data;\n\t\t\t\tresolve(data);\n\t\t\t})\n\t\t\t.catch(f=>console.log(f));\n\t\t});\n\t}\n\tput(path,data){\n\t\tlet self=this,base=[],columns;\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tself.pull(path)\n\t\t\t.then(\n\t\t\t\td=>{\n\t\t\t\t\tbase=Gitrows._parse(Util.atob(d.content),self.type);\n\t\t\t\t\tif (self.strict){\n\t\t\t\t\t\tself.columns=self.columns||Util.columns(base);\n\t\t\t\t\t\tdata=Util.columnsApply(data,self.columns,self.default);\n\t\t\t\t\t}\n\t\t\t\t\tif (!Array.isArray(base))\n\t\t\t\t\t\tbase=[base];\n\t\t\t\t\tif (Array.isArray(data))\n\t\t\t\t\t\tbase.push(...data);\n\t\t\t\t\telse\n\t\t\t\t\t\tbase.push(data);\n\t\t\t\t\tself.push(path,base,d.sha).then(r=>resolve(r)).catch(e=>reject(e));\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch(f=>{\n\t\t\t\tbase=data;\n\t\t\t\tself.push(path,base).then(r=>resolve(r)).catch(e=>reject(e));\n\t\t\t});\n\t\t});\n\t}\n\tupdate(path,data,query){\n\t\tlet self=this,base=[],columns;\n\t\tconst pathData=GitPath.parse(path)||{};\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tself.pull(path)\n\t\t\t.then(\n\t\t\t\td=>{\n\t\t\t\t\tbase=Gitrows._parse(Util.atob(d.content),self.type);\n\t\t\t\t\tif (self.strict){\n\t\t\t\t\t\tself.columns=self.columns||Util.columns(base);\n\t\t\t\t\t\tbase=Util.columnsApply(base,self.columns,self.default);\n\t\t\t\t\t}\n\t\t\t\t\tif (pathData.resource){\n\t\t\t\t\t\tquery=query||{};\n\t\t\t\t\t\tquery.id=pathData.resource;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof query=='undefined') resolve(Response(304));\n\t\t\t\t\tif (!Array.isArray(base))\n\t\t\t\t\t\tbase=[base];\n\t\t\t\t\tbase=Util.valuesApply(base,data,query);\n\t\t\t\t\tself.push(path,base,d.sha).then(r=>resolve(Response(202))).catch(e=>e);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\treplace(path,data){\n\t\tlet self=this,base=[],columns;\n\t\tconst pathData=GitPath.parse(path)||{};\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tself.pull(path)\n\t\t\t.then(\n\t\t\t\td=>{\n\t\t\t\t\tself.push(path,data,d.sha).then(r=>resolve(Response(202))).catch(e=>e);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tdelete(path,query){\n\t\tlet self=this,base=[];\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tconst pathData=GitPath.parse(path);\n\t\t\tself.options(pathData);\n\t\t\tif (pathData.resource){\n\t\t\t\tquery=query||{};\n\t\t\t\tquery.id=pathData.resource;\n\t\t\t};\n\t\t\tif (typeof query=='undefined') resolve(Response(304));\n\t\t\tself.pull(pathData)\n\t\t\t.then(\n\t\t\t\td=>{\n\t\t\t\t\tbase=Gitrows._parse(Util.atob(d.content),self.type);\n\t\t\t\t\tconst diff=Util.where(base,query);\n\t\t\t\t\tconst data = base.filter(x => !diff.includes(x));\n\t\t\t\t\tif (JSON.stringify(base) !== JSON.stringify(data))\n\t\t\t\t\t\tself.push(path,data,d.sha).then(r=>resolve(Response(204))).catch(e=>e);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n \tcolumns(path){\n\t\treturn this.get(path).then(data=>Util.columns(data));\n\t}\n\ttypes(path,query){\n\t\treturn this.get(path,query).then(data=>Util.types(data));\n\t}\n\toptions(obj){\n\t\tlet self=this;\n\t\tconst allowed=['server','ns','owner','repo','branch','path','user','token','message','author','csv','type','columns','strict','default'];\n\t\tif (typeof obj=='undefined'){\n\t\t\tlet data={};\n\t\t\tallowed.forEach((item, i) => {\n\t\t\t\tdata[item]=this[item];\n\t\t\t});\n\t\t\treturn data;\n\t\t}\n\t\tfor (let key in obj) {\n\t\t\tif (allowed.includes(key)&&typeof obj[key]!=='undefined') this[key]=obj[key];\n\t\t}\n\t\treturn self;\n\t}\n\tasync test(path,constraint={}){\n\t\tlet result=GitPath.parse(path)||{};\n\t\tif (!result.valid){\n\t\t\tif (result.repo&&constraint.fragment!==false&&constraint.file!==true) result.fragment=true;\n\t\t\telse return {...result,...Response(400)};\n\t\t} else result.fragment=false;\n\t\tconst acl=await this._acl(path).then(r=>r).catch(e=>e);\n\t\tresult={...result,...acl};\n\t\tif (acl.code) {\n\t\t\tresult.valid=false;\n\t\t\tresult.level='repo';\n\t\t\treturn {...result,...Response(acl.code)};\n\t\t} else {\n\t\t\tresult.valid=result.fragment;\n\t\t\tresult={...result,...result.permissions};\n\t\t\tdelete(result.permissions);\n\t\t}\n\t\tif (!result.fragment){\n\t\t\tconst file=await this._isRepoFile(path).then(r=>r).catch(e=>e);\n\t\t\tresult.valid=file===true;\n\t\t\tresult.level='file';\n\t\t\tresult={...result,...Response(file===true?200:404)};\n\t\t}\n\t\tObject.keys(constraint).forEach((item, i) => {\n\t\t\tif (result[item]!==constraint[item]) {\n\t\t\t\tresult.valid=false;\n\t\t\t\tif (result.message&&Array.isArray(result.message.description))\n\t\t\t\t\tresult.message.description.push(`Constraint Violation - ${item} must not be ${result[item]}`);\n\t\t\t\telse\n\t\t\t\t\tresult={...result,...Response(400,{description:[`Constraint Violation - ${item} must not be ${result[item]}`]})};\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\t_acl(path){\n\t\tlet self=this;\n\t\tconst test=GitPath.parse(path)||{};\n\t\tif (!test.repo)\n\t\t\treturn Promise.reject(Response(404));\n\t\tif (test.ns!='github')\n\t\t\treturn Promise.reject(Response(501));\n\t\tconst hash=`acl:${test.ns}:${test.owner}:${test.repo}`;\n\t\tif (typeof self._cache[hash]!='undefined')\n\t\t\treturn new Promise((resolve, reject)=>self._cache[hash]?resolve(self._cache[hash]):reject(Response(404)));\n\t\tlet headers={\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tif (self.user&&self.token)\n\t\t\theaders['Authorization']=\"Basic \" + Util.btoa(self.user + \":\" + self.token);\n\t\treturn fetch(\"https://api.github.com/repos/\"+test.owner+'/'+test.repo,{headers:headers}).then(r=>{\n\t\t\tif (!r.ok){\n\t\t\t\tself._cache[hash]=null;\n\t\t\t\treturn Response(404);\n\t\t\t}\n\t\t\treturn r.json().then(data=>{\n\t\t\t\tconst acl={'private':data.private,'permissions':data.permissions};\n\t\t\t\tself._cache[hash]=acl;\n\t\t\t\treturn acl;\n\t\t\t})\n\t\t}).then(r=>r).catch(e=>e);\n\t}\n\t_listPushableRepos(ns,owner,grouped){\n\t\tconst self=this;\n\t\tif (typeof ns=='undefined')\n\t\t\treturn Promise.reject(Response(400));\n\t\tns=ns.replace('@','');\n\t\tif (typeof owner=='undefined')\n\t\t\t[ns,owner]=ns.split('/');\n\t\tif (ns!='github')\n\t\t\treturn Promise.reject(Response(400));\n\t\tif (!self.user||!self.token)\n\t\t\treturn Promise.reject(Response(403));\n\t\tconst hash=`repos:${ns}:${owner}:${!!grouped}`;\n\t\tif (typeof self._cache[hash]!='undefined')\n\t\t\treturn new Promise((resolve, reject)=>self._cache[hash]?resolve(self._cache[hash]):reject(Response(404)));\n\t\tlet headers={\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Authorization': \"Basic \" + Util.btoa(self.user + \":\" + self.token)\n\t\t};\n\t\treturn fetch(\"https://api.github.com/user/repos?per_page=100\",{headers:headers}).then(r=>{\n\t\t\tif (!r.ok){\n\t\t\t\tself._cache[hash]=null;\n\t\t\t\treturn Response(404);\n\t\t\t}\n\t\t\treturn r.json().then(r=>{\n\t\t\t\tself._cache[`raw:repos:${ns}:${owner}`]=r;\n\t\t\t\tlet repos;\n\t\t\t\tif (!!grouped){\n\t\t\t\t\trepos={};\n\t\t\t\t\tr.map(i=>repos[i.owner.login]={avatar:i.owner.avatar_url,type:i.owner.type,login:i.owner.login});\n\t\t\t\t\tObject.keys(repos).forEach((item, i) => {\n\t\t\t\t\t\trepos[item]['repos']=r.filter(f=>f.permissions.push&&f.owner.login==item).map(r=>`@${ns}/${r.full_name}`);\n\t\t\t\t\t});\n\t\t\t\t\trepos=(typeof owner!='undefined')?repos[owner]:repos;\n\t\t\t\t\tself._cache[hash]=repos;\n\t\t\t\t\treturn repos;\n\t\t\t\t}\n\t\t\t\trepos=r.filter(f=>f.permissions.push).map(r=>`@${ns}/${r.full_name}`);\n\t\t\t\tif (typeof owner!='undefined') repos=repos.filter(r=>~r.indexOf(`@${ns}/${owner}/`));\n\t\t\t\tself._cache[hash]=repos;\n\t\t\t\treturn repos;\n\t\t\t})\n\t\t}).then(r=>r).catch(e=>e);\n\t}\n\t_listRepoContents(ns,owner,repo){\n\t\tlet self=this;\n\t\tlet test=GitPath.parse(ns);\n\t\tif (test.repo){\n\t\t\tns=test.ns;\n\t\t\towner=test.owner;\n\t\t\trepo=test.repo;\n\t\t}\n\t\tif (!ns||!owner||!repo)\n\t\t\treturn Promise.reject(Response(400));\n\t\tif (ns!='github')\n\t\t\treturn Promise.reject(Response(501));\n\t\tconst hash=`files:${ns}:${owner}:${repo}`;\n\t\tif (typeof self._cache[hash]!='undefined')\n\t\t\treturn new Promise((resolve, reject)=>self._cache[hash]?resolve(self._cache[hash]):reject(Response(404)));\n\t\tlet headers={\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tif (self.user&&self.token)\n\t\t\theaders['Authorization']=\"Basic \" + Util.btoa(self.user + \":\" + self.token);\n\t\treturn fetch(\"https://api.github.com/repos/\"+owner+'/'+repo+'/git/trees/master?recursive=1',{headers:headers}).then(r=>{\n\t\t\tif (!r.ok){\n\t\t\t\tself._cache[hash]=null;\n\t\t\t\treturn Response(404);\n\t\t\t}\n\t\t\treturn r.json().then(data=>{\n\t\t\t\tif (typeof data.tree =='undefined'||!Array.isArray(data.tree))\n\t\t\t\t\treturn Response(404);\n\t\t\t\tlet contents=[];\n\t\t\t\tdata.tree.forEach((item, i) => {\n\t\t\t\t\tcontents.push(item.path);\n\t\t\t\t});\n\t\t\t\tself._cache[hash]=contents;\n\t\t\t\treturn contents;\n\t\t\t})\n\t\t}).then(r=>r).catch(e=>e);\n\t}\n\t_isRepoFile(path){\n\t\tlet self=this;\n\t\tconst test=GitPath.parse(path)||{};\n\t\treturn self._listRepoContents(path).then(c=>c.findIndex(item => test.path.toLowerCase() === item.toLowerCase())>-1).catch(e=>e);\n\t}\n\t_getRepoTree(ns,owner,repo){\n\t\tlet self=this;\n\t\treturn self._listRepoContents(ns,owner,repo).then(c=>{\n\t\t\tlet result={};\n\t\t\tc.forEach(p => p.split('/').reduce((o, k) => o[k] = o[k] || {}, result));\n\t\t\treturn result;\n\t\t}).catch(e=>e);\n\t}\n\tstatic _applyFilters(data,query){\n\t\tdata=Util.where(data,query);\n\t\tlet aggregates=Object.keys(query)\n\t\t\t.filter(key => key.startsWith('$'))\n\t\t\t.reduce((obj, key) => {\n\t\t\t\tobj[key] = query[key];\n\t\t\t\treturn obj;\n\t\t\t}, {});\n\t\tif(Object.keys(aggregates).length)\n\t\t\tdata=Util.aggregate(data,aggregates);\n\t\t\treturn data;\n\t}\n\tstatic _stringify(obj,type='json'){\n\t\ttry {\n\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\tcase 'csv':\n\t\t\t\t\treturn Array.isArray(obj)?CSV.stringify(obj,{header:true}):null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yaml':\n\t\t\t\t\treturn YAML.stringify(obj,10);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn JSON.stringify(obj,null,2);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tstatic _parse(content,type='json'){\n\t\ttype=type.toLowerCase();\n\t\ttry {\n\t\t\tswitch (type) {\n\t\t\t\tcase 'csv':\n\t\t\t\t\treturn CSV.parse(content,{columns:true,skip_empty_lines:true,cast:true});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yaml':\n\t\t\t\t\treturn YAML.parse(content);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn JSON.parse(content);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\t_pullOrFetch(url,method='fetch'){\n\t\tlet self=this;\n\t\tif (method=='pull'){\n\t\t\treturn self.pull(GitPath.fromUrl(url)).then(p=>{self._meta.repository.private=true;return Util.atob(p.content)}).catch(e=>e);\n\t\t}\n\t\treturn fetch(url)\n\t\t.then(\n\t\t\tr=>{\n\t\t\t\tif (r.ok) {\n\t\t\t\t\tself._meta.repository.private=false;\n\t\t\t\t\treturn r.text()\n\t\t\t\t};\n\t\t\t\t//retry by api if token is present\n\t\t\t\tif (self.user!==undefined&&self.token!==undefined&&self.ns=='github'){\n\t\t\t\t\treturn self.pull(GitPath.fromUrl(url)).then(p=>{self._meta.repository.private=true;return Util.atob(p.content)}).catch(e=>e);\n\t\t\t\t}\n\t\t\t\treturn Response(r.status);\n\t\t\t}\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}