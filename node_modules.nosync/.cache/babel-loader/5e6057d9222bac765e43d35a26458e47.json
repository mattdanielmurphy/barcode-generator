{"ast":null,"code":"const parse = require('.');\n\nmodule.exports = function (data, options = {}) {\n  if (typeof data === 'string') {\n    data = Buffer.from(data);\n  }\n\n  const records = options && options.objname ? {} : [];\n  const parser = new parse.Parser(options);\n\n  parser.push = function (record) {\n    if (record === null) {\n      return;\n    }\n\n    if (options.objname === undefined) records.push(record);else {\n      records[record[0]] = record[1];\n    }\n  };\n\n  const err1 = parser.__parse(data, false);\n\n  if (err1 !== undefined) throw err1;\n\n  const err2 = parser.__parse(undefined, true);\n\n  if (err2 !== undefined) throw err2;\n  return records;\n};","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/csv-parse/lib/sync.js"],"names":["parse","require","module","exports","data","options","Buffer","from","records","objname","parser","Parser","push","record","undefined","err1","__parse","err2"],"mappings":"AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,GAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,OAAO,GAAC,EAAvB,EAA0B;AACzC,MAAG,OAAOD,IAAP,KAAgB,QAAnB,EAA4B;AAC1BA,IAAAA,IAAI,GAAGE,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAP;AACD;;AACD,QAAMI,OAAO,GAAGH,OAAO,IAAIA,OAAO,CAACI,OAAnB,GAA6B,EAA7B,GAAkC,EAAlD;AACA,QAAMC,MAAM,GAAG,IAAIV,KAAK,CAACW,MAAV,CAAiBN,OAAjB,CAAf;;AACAK,EAAAA,MAAM,CAACE,IAAP,GAAc,UAASC,MAAT,EAAgB;AAC5B,QAAGA,MAAM,KAAK,IAAd,EAAmB;AACjB;AACD;;AACD,QAAGR,OAAO,CAACI,OAAR,KAAoBK,SAAvB,EACEN,OAAO,CAACI,IAAR,CAAaC,MAAb,EADF,KAEI;AACFL,MAAAA,OAAO,CAACK,MAAM,CAAC,CAAD,CAAP,CAAP,GAAqBA,MAAM,CAAC,CAAD,CAA3B;AACD;AACF,GATD;;AAUA,QAAME,IAAI,GAAGL,MAAM,CAACM,OAAP,CAAeZ,IAAf,EAAqB,KAArB,CAAb;;AACA,MAAGW,IAAI,KAAKD,SAAZ,EAAuB,MAAMC,IAAN;;AACvB,QAAME,IAAI,GAAGP,MAAM,CAACM,OAAP,CAAeF,SAAf,EAA0B,IAA1B,CAAb;;AACA,MAAGG,IAAI,KAAKH,SAAZ,EAAuB,MAAMG,IAAN;AACvB,SAAOT,OAAP;AACD,CArBD","sourcesContent":["\nconst parse = require('.')\n\nmodule.exports = function(data, options={}){\n  if(typeof data === 'string'){\n    data = Buffer.from(data)\n  }\n  const records = options && options.objname ? {} : []\n  const parser = new parse.Parser(options)\n  parser.push = function(record){\n    if(record === null){\n      return\n    }\n    if(options.objname === undefined)\n      records.push(record)\n    else{\n      records[record[0]] = record[1]\n    }\n  }\n  const err1 = parser.__parse(data, false)\n  if(err1 !== undefined) throw err1\n  const err2 = parser.__parse(undefined, true)\n  if(err2 !== undefined) throw err2\n  return records\n}\n"]},"metadata":{},"sourceType":"script"}