{"ast":null,"code":"'use strict';\n\nvar packageJson = require('../package.json');\n\nvar PageHelper = require('./PageHelper');\n\nvar RequestResult = require('./RequestResult');\n\nvar errors = require('./errors');\n\nvar http = require('./_http');\n\nvar json = require('./_json');\n\nvar query = require('./query');\n\nvar stream = require('./stream');\n\nvar util = require('./_util');\n\nvar values = require('./values');\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?{ string: string }} options.headers\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Only applicable for NodeJS environment (when http2 module is used), 500 by default,\n *   can be configured via FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable.\n */\n\n\nfunction Client(options) {\n  var http2SessionIdleTimeEnv = parseInt(util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME'), 10);\n  var http2SessionIdleTimeDefault = !isNaN(http2SessionIdleTimeEnv) ? http2SessionIdleTimeEnv : 500;\n  options = util.applyDefaults(options, {\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime: http2SessionIdleTimeDefault\n  });\n  this._observer = options.observer;\n  this._http = new http.HttpClient(options);\n  this.stream = stream.StreamAPI(this);\n}\n/**\n * Current API version.\n *\n * @type {string}\n */\n\n\nClient.apiVersion = packageJson.apiVersion;\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\n\nClient.prototype.query = function (expression, options) {\n  return this._execute('POST', '', query.wrap(expression), null, options);\n};\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\n\n\nClient.prototype.paginate = function (expression, params, options) {\n  params = util.defaults(params, {});\n  options = util.defaults(options, {});\n  return new PageHelper(this, expression, params, options);\n};\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\n\n\nClient.prototype.ping = function (scope, timeout) {\n  return this._execute('GET', 'ping', null, {\n    scope: scope,\n    timeout: timeout\n  });\n};\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\n\n\nClient.prototype.getLastTxnTime = function () {\n  return this._http.getLastTxnTime();\n};\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\n\n\nClient.prototype.syncLastTxnTime = function (time) {\n  this._http.syncLastTxnTime(time);\n};\n\nClient.prototype._execute = function (method, path, data, query, options) {\n  query = util.defaults(query, null);\n\n  if (path instanceof values.Ref || util.checkInstanceHasProperty(path, '_isFaunaRef')) {\n    path = path.value;\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query);\n  }\n\n  var startTime = Date.now();\n  var self = this;\n  var body = ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data);\n  return this._http.execute(Object.assign({}, options, {\n    path: path,\n    query: query,\n    method: method,\n    body: body\n  })).then(function (response) {\n    var endTime = Date.now();\n    var responseObject = json.parseJSON(response.body);\n    var result = new RequestResult(method, path, query, body, data, response.body, responseObject, response.status, response.headers, startTime, endTime);\n\n    self._handleRequestResult(response, result, options);\n\n    return responseObject['resource'];\n  });\n};\n\nClient.prototype._handleRequestResult = function (response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time';\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10));\n  }\n\n  var observers = [this._observer, options && options.observer];\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this);\n    }\n  });\n  errors.FaunaHTTPError.raiseForStatusCode(result);\n};\n\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/faunadb/src/Client.js"],"names":["packageJson","require","PageHelper","RequestResult","errors","http","json","query","stream","util","values","Client","options","http2SessionIdleTimeEnv","parseInt","getEnvVariable","http2SessionIdleTimeDefault","isNaN","applyDefaults","domain","scheme","port","secret","timeout","observer","keepAlive","headers","fetch","undefined","queryTimeout","http2SessionIdleTime","_observer","_http","HttpClient","StreamAPI","apiVersion","prototype","expression","_execute","wrap","paginate","params","defaults","ping","scope","getLastTxnTime","syncLastTxnTime","time","method","path","data","Ref","checkInstanceHasProperty","value","removeUndefinedValues","startTime","Date","now","self","body","indexOf","JSON","stringify","execute","Object","assign","then","response","endTime","responseObject","parseJSON","result","status","_handleRequestResult","txnTimeHeaderKey","observers","forEach","FaunaHTTPError","raiseForStatusCode","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar packageJson = require('../package.json')\nvar PageHelper = require('./PageHelper')\nvar RequestResult = require('./RequestResult')\nvar errors = require('./errors')\nvar http = require('./_http')\nvar json = require('./_json')\nvar query = require('./query')\nvar stream = require('./stream')\nvar util = require('./_util')\nvar values = require('./values')\n\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?{ string: string }} options.headers\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Only applicable for NodeJS environment (when http2 module is used), 500 by default,\n *   can be configured via FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable.\n */\nfunction Client(options) {\n  var http2SessionIdleTimeEnv = parseInt(\n    util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME'),\n    10\n  )\n  var http2SessionIdleTimeDefault = !isNaN(http2SessionIdleTimeEnv)\n    ? http2SessionIdleTimeEnv\n    : 500\n\n  options = util.applyDefaults(options, {\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime: http2SessionIdleTimeDefault,\n  })\n\n  this._observer = options.observer\n  this._http = new http.HttpClient(options)\n  this.stream = stream.StreamAPI(this)\n}\n\n/**\n * Current API version.\n *\n * @type {string}\n */\nClient.apiVersion = packageJson.apiVersion\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\nClient.prototype.query = function(expression, options) {\n  return this._execute('POST', '', query.wrap(expression), null, options)\n}\n\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\nClient.prototype.paginate = function(expression, params, options) {\n  params = util.defaults(params, {})\n  options = util.defaults(options, {})\n\n  return new PageHelper(this, expression, params, options)\n}\n\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\nClient.prototype.ping = function(scope, timeout) {\n  return this._execute('GET', 'ping', null, { scope: scope, timeout: timeout })\n}\n\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\nClient.prototype.getLastTxnTime = function() {\n  return this._http.getLastTxnTime()\n}\n\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\nClient.prototype.syncLastTxnTime = function(time) {\n  this._http.syncLastTxnTime(time)\n}\n\nClient.prototype._execute = function(method, path, data, query, options) {\n  query = util.defaults(query, null)\n\n  if (\n    path instanceof values.Ref ||\n    util.checkInstanceHasProperty(path, '_isFaunaRef')\n  ) {\n    path = path.value\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query)\n  }\n\n  var startTime = Date.now()\n  var self = this\n  var body =\n    ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data)\n\n  return this._http\n    .execute(\n      Object.assign({}, options, {\n        path: path,\n        query: query,\n        method: method,\n        body: body,\n      })\n    )\n    .then(function(response) {\n      var endTime = Date.now()\n      var responseObject = json.parseJSON(response.body)\n      var result = new RequestResult(\n        method,\n        path,\n        query,\n        body,\n        data,\n        response.body,\n        responseObject,\n        response.status,\n        response.headers,\n        startTime,\n        endTime\n      )\n      self._handleRequestResult(response, result, options)\n\n      return responseObject['resource']\n    })\n}\n\nClient.prototype._handleRequestResult = function(response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time'\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10))\n  }\n\n  var observers = [this._observer, options && options.observer]\n\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this)\n    }\n  })\n\n  errors.FaunaHTTPError.raiseForStatusCode(result)\n}\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}