{"ast":null,"code":"const Util = {\n  asc: (obj, key) => obj.sort((a, b) => a[key] > b[key] ? 1 : b[key] > a[key] ? -1 : 0),\n  desc: (obj, key) => obj.sort((a, b) => a[key] < b[key] ? 1 : b[key] < a[key] ? -1 : 0),\n  limit: (obj, a, b) => typeof b == 'undefined' || isNaN(b) ? obj.slice(0, a) : obj.slice(b, a + b),\n  where: (obj, filter) => {\n    if (typeof filter == 'undefined' || Object.keys(filter).length == 0) return obj;\n\n    if (obj.constructor !== Array && typeof filter.id != 'undefined') {\n      if (!~filter.id.indexOf('not:')) return [obj[filter.id]];else {\n        delete obj[filter.id.split(':').pop()];\n        return obj;\n      }\n    }\n\n    obj = Object.values(obj);\n    Object.keys(filter).forEach(key => {\n      if (key.indexOf('$') == 0) return;\n      let values = filter[key];\n      if (!Array.isArray(values)) values = [values];\n      values.forEach((item, i) => {\n        let value = item.toString();\n\n        if (value.indexOf(':') > -1) {\n          value = value.split(':');\n\n          switch (value[0].toLowerCase()) {\n            case 'gt':\n              obj = obj.filter(item => item[key] !== undefined && item[key] > value[1]);\n              break;\n\n            case 'gte':\n              obj = obj.filter(item => item[key] !== undefined && item[key] >= value[1]);\n              break;\n\n            case 'lt':\n              obj = obj.filter(item => item[key] !== undefined && item[key] < value[1]);\n              break;\n\n            case 'lte':\n              obj = obj.filter(item => item[key] !== undefined && item[key] <= value[1]);\n              break;\n\n            case 'not':\n              obj = obj.filter(item => item[key] !== undefined && item[key] != value[1]);\n              break;\n\n            case 'eq':\n              obj = obj.filter(item => item[key] !== undefined && item[key] == value[1]);\n              break;\n\n            case 'starts':\n            case '^':\n              obj = obj.filter(item => item[key] !== undefined && typeof item[key] == 'string' && item[key].toLowerCase().startsWith(value[1].toLowerCase()));\n              break;\n\n            case 'ends':\n            case '$':\n              obj = obj.filter(item => item[key] !== undefined && typeof item[key] == 'string' && item[key].toLowerCase().endsWith(value[1].toLowerCase()));\n              break;\n\n            case 'contains':\n            case '*':\n              obj = obj.filter(item => item[key] !== undefined && typeof item[key] == 'string' && ~item[key].toLowerCase().indexOf(value[1].toLowerCase()));\n              break;\n\n            default:\n          }\n        } else obj = obj.filter(item => typeof item[key] != 'undefined' && item[key] == value);\n      });\n    });\n    return obj;\n  },\n  pluck: (obj, keys) => {\n    let returnAsValues = false;\n\n    if (!Array.isArray(keys)) {\n      if (keys == '*') return obj;\n      keys = [keys];\n      returnAsValues = true;\n    }\n\n    obj = Object.values(obj);\n    let result = [];\n    obj.forEach((item, i) => {\n      result.push({});\n\n      for (let key in item) {\n        if (~keys.indexOf(key)) {\n          if (returnAsValues) result[i] = item[key];else result[i][key] = item[key];\n        }\n      }\n    });\n    return result;\n  },\n  aggregate: (obj, aggregates) => {\n    let data = {},\n        length = 0,\n        sum = 0;\n\n    for (let key in aggregates) {\n      let items = aggregates[key] == '*' ? '*' : aggregates[key].split(',').map(s => s.trim());\n\n      switch (key) {\n        case '$select':\n          data = Util.pluck(Array.isArray(data) ? data : obj, items);\n          break;\n\n        case '$count':\n          if (Array.isArray(items)) items.forEach((item, i) => {\n            data['count(' + item + ')'] = Util.pluck(obj, item).filter(e => e.toString().length).length;\n          });else data['count(' + items + ')'] = obj.filter(e => e).length;\n          break;\n\n        case '$sum':\n          if (Array.isArray(items)) items.forEach((item, i) => {\n            let column = Util.pluck(obj, item);\n            sum = column.reduce((prev, curr) => !isNaN(curr) ? prev + +curr : NaN, 0);\n            data['sum(' + item + ')'] = isNaN(sum) ? null : sum;\n          });else return;\n          break;\n\n        case '$avg':\n          if (Array.isArray(items)) items.forEach((item, i) => {\n            let column = Util.pluck(obj, item);\n            length = column.filter(e => e.toString().length).length;\n            sum = column.reduce((prev, curr) => !isNaN(curr) ? prev + +curr : 0, 0);\n            data['avg(' + item + ')'] = sum != 0 ? sum / length : null;\n          });else return;\n          break;\n\n        case '$min':\n          if (Array.isArray(items)) items.forEach((item, i) => {\n            let column = Util.pluck(obj, item);\n            let min = Math.min(...column);\n            data['min(' + item + ')'] = isNaN(min) ? null : min;\n          });else return;\n          break;\n\n        case '$max':\n          if (Array.isArray(items)) items.forEach((item, i) => {\n            let column = Util.pluck(obj, item);\n            let max = Math.max(...column);\n            data['max(' + item + ')'] = isNaN(max) ? null : max;\n          });else return;\n          break;\n\n        case '$order':\n          data = Array.isArray(data) ? data : obj;\n          if (Array.isArray(items)) items.forEach((item, i) => {\n            let values = item.split(':');\n            if (!values.length == 2) return;\n            if (values[1] == 'asc') data = Util.asc(data, values[0]);\n            if (values[1] == 'desc') data = Util.desc(data, values[0]);\n          });else return;\n          break;\n\n        default:\n          data = obj;\n      }\n    }\n\n    if (aggregates['$limit']) {\n      values = aggregates['$limit'].toString().split(',');\n      data = Util.limit(data, +values[0], +values[1]);\n    }\n\n    return data;\n  },\n  columns: obj => {\n    let columns = new Set();\n    if (!Array.isArray(obj)) Object.keys(obj).forEach(item => columns.add(item));else obj.forEach(row => Object.keys(row).forEach(item => columns.add(item)));\n    return Array.from(columns);\n  },\n  typeof: value => {\n    let primitive = typeof value,\n        format = null;\n\n    switch (primitive) {\n      case 'number':\n        if (Number.isFinite(value)) {\n          if (Number.isInteger(value)) {\n            primitive = 'integer';\n            format = 'int32';\n          } else {\n            format = 'float';\n          }\n        } else if (Number.isNaN(value)) primitive = 'NaN';\n\n        break;\n\n      case 'object':\n        if (Array.isArray(value)) primitive = 'array';\n        break;\n\n      case 'bigint':\n        primitive = 'integer';\n        format = 'int64';\n        break;\n\n      case 'string':\n        //Test for base64 encoding\n        if (value.slice(-1) == '=' && /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(value)) format = 'byte'; //Test for rfc 3339 full-date\n\n        if (/^[0-9]+-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])$/gm.test(value)) format = 'date'; //Test for rfc 3339 date-time\n\n        if (/^[0-9]+-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])[Tt](?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9]|60)(?:\\.[0-9]+)?(?:[Zz]|[\\+|\\-](?:[01][0-9]|2[0-3]):[0-5][0-9])$/gm.test(value)) format = 'date-time';\n        break;\n\n      default:\n    }\n\n    let result = {\n      'type': primitive\n    };\n    if (format) result.format = format;\n    return result;\n  },\n  types: obj => {\n    let result = {};\n    const order = ['number', 'string']; // higher index takes precedence\n\n    const precedence = (item, type) => typeof result[item] != 'undefined' && order.indexOf(type) < order.indexOf(result[item]) ? result[item] : type;\n\n    if (Util.typeof(obj).type == 'object' && Object.keys(obj)) Object.keys(obj).forEach(item => result[item] = Util.typeof(obj[item]));else obj.forEach(row => Object.keys(row).forEach(item => result[item] = precedence(item, Util.typeof(row[item]))));\n    return result;\n  },\n  columnsApply: (obj, columns, defaultValue = null) => {\n    if (!Array.isArray(obj)) {\n      columns.forEach(item => obj[item] = obj[item] || defaultValue);\n      Object.keys(obj).forEach(key => {\n        if (!~columns.indexOf(key)) delete obj[key];\n      });\n    } else obj.forEach((row, index) => obj[index] = Util.columnsApply(row, columns));\n\n    return obj;\n  },\n  valuesApply: (obj, values, query) => {\n    if (!Array.isArray(obj)) {\n      obj = Object.assign(obj, values);\n    } else obj.forEach((row, index) => obj[index] = Util.where([row], query).length ? Util.valuesApply(row, values) : row);\n\n    return obj;\n  },\n  btoa: string => typeof window === 'undefined' ? Buffer.from(string, 'utf-8').toString('base64') : window.btoa(string),\n  atob: string => typeof window === 'undefined' ? Buffer.from(string, 'base64').toString('utf-8') : window.atob(string),\n  removeEmpty: obj => {\n    Object.keys(obj).forEach(k => obj[k] && typeof obj[k] === 'object' && removeEmpty(obj[k]) || !obj[k] && obj[k] !== undefined && delete obj[k]);\n    return obj;\n  },\n  mime: extension => {\n    const mimetypes = {\n      csv: 'text/csv',\n      json: 'application/json',\n      md: 'text/markdown',\n      yaml: 'application/x-yaml'\n    };\n    return mimetypes[extension] || 'application/octet-stream';\n  }\n};\nmodule.exports = Util;","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/gitrows/lib/util.js"],"names":["Util","asc","obj","key","sort","a","b","desc","limit","isNaN","slice","where","filter","Object","keys","length","constructor","Array","id","indexOf","split","pop","values","forEach","isArray","item","i","value","toString","toLowerCase","undefined","startsWith","endsWith","pluck","returnAsValues","result","push","aggregate","aggregates","data","sum","items","map","s","trim","e","column","reduce","prev","curr","NaN","min","Math","max","columns","Set","add","row","from","typeof","primitive","format","Number","isFinite","isInteger","test","types","order","precedence","type","columnsApply","defaultValue","index","valuesApply","query","assign","btoa","string","window","Buffer","atob","removeEmpty","k","mime","extension","mimetypes","csv","json","md","yaml","module","exports"],"mappings":"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","sourcesContent":["const Util={\n\n\tasc:(obj,key)=>obj.sort((a,b) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0)),\n\n\tdesc:(obj,key)=>obj.sort((a,b) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0)),\n\n\tlimit:(obj,a,b)=>(typeof b=='undefined'||isNaN(b))?obj.slice(0,a):obj.slice(b,a+b),\n\n\twhere:(obj,filter)=>{\n\t\tif (typeof filter=='undefined'||Object.keys(filter).length==0) return obj;\n\t\tif(obj.constructor !== Array && typeof filter.id!='undefined'){\n\t\t\tif (!~filter.id.indexOf('not:'))\n\t\t\t\treturn [obj[filter.id]];\n\t\t\telse {\n\t\t\t\tdelete obj[filter.id.split(':').pop()];\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\t\tobj=Object.values(obj);\n\t\tObject.keys(filter).forEach((key) => {\n\t\t\tif (key.indexOf('$')==0) return;\n\t\t\tlet values=filter[key];\n\t\t\tif (!Array.isArray(values)) values=[values];\n\t\t\tvalues.forEach((item, i) => {\n\t\t\t\tlet value=item.toString();\n\t\t\t\tif (value.indexOf(':')>-1){\n\t\t\t\t\tvalue=value.split(':');\n\t\t\t\t\tswitch (value[0].toLowerCase()) {\n\t\t\t\t\t\tcase 'gt':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&item[key]>value[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'gte':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&item[key]>=value[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'lt':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&item[key]<value[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'lte':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&item[key]<=value[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&item[key]!=value[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'eq':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&item[key]==value[1]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'starts':\n\t\t\t\t\t\tcase '^':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&typeof item[key]=='string'&&item[key].toLowerCase().startsWith(value[1].toLowerCase()));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'ends':\n\t\t\t\t\t\tcase '$':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&typeof item[key]=='string'&&item[key].toLowerCase().endsWith(value[1].toLowerCase()));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'contains':\n\t\t\t\t\t\tcase '*':\n\t\t\t\t\t\t\tobj = obj.filter(item=>item[key]!==undefined&&typeof item[key]=='string'&&~item[key].toLowerCase().indexOf(value[1].toLowerCase()));\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\tobj = obj.filter(item=>typeof item[key]!='undefined'&&item[key]==value);\n\t\t\t});\n\t\t});\n\t\treturn obj;\n\t},\n\n\tpluck:(obj,keys)=>{\n\t\tlet returnAsValues=false;\n\t\tif(!Array.isArray(keys)){\n\t\t\tif (keys=='*') return obj;\n\t\t\tkeys=[keys];\n\t\t\treturnAsValues=true;\n\t\t}\n\t\tobj=Object.values(obj);\n\t\tlet result=[];\n\t\tobj.forEach((item, i) => {\n\t\t\tresult.push({});\n\t\t\tfor (let key in item) {\n\t\t\t\tif (~keys.indexOf(key)) {\n\t\t\t\t\tif (returnAsValues)\n\t\t\t\t\t\tresult[i]=item[key];\n\t\t\t\t\telse\n\t\t\t\t\t\tresult[i][key]=item[key];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t},\n\n\taggregate:(obj,aggregates)=>{\n\t\tlet data={},length=0,sum=0;\n\t\tfor (let key in aggregates) {\n\t\t\tlet items=aggregates[key]=='*'?'*':aggregates[key].split(',').map(s=>s.trim());\n\t\t\tswitch (key) {\n\t\t\t\tcase '$select':\n\t\t\t\t\tdata=Util.pluck(Array.isArray(data)?data:obj,items);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$count':\n\t\t\t\t\tif (Array.isArray(items))\n\t\t\t\t\t\titems.forEach((item, i) => {\n\t\t\t\t\t\t\tdata['count('+item+')']=Util.pluck(obj,item).filter(e=>e.toString().length).length;\n\t\t\t\t\t\t});\n\t\t\t\t\telse data['count('+items+')']=obj.filter(e=>e).length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$sum':\n\t\t\t\t\tif (Array.isArray(items))\n\t\t\t\t\t\titems.forEach((item, i) => {\n\t\t\t\t\t\t\tlet column=Util.pluck(obj,item);\n\t\t\t\t\t\t\tsum=column.reduce((prev, curr) => !isNaN(curr)?prev+(+curr):NaN,0);\n\t\t\t\t\t\t\tdata['sum('+item+')']=isNaN(sum)?null:sum;\n\t\t\t\t\t\t});\n\t\t\t\t\telse return;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$avg':\n\t\t\t\t\tif (Array.isArray(items))\n\t\t\t\t\t\titems.forEach((item, i) => {\n\t\t\t\t\t\t\tlet column=Util.pluck(obj,item);\n\t\t\t\t\t\t\tlength=column.filter(e=>e.toString().length).length;\n\t\t\t\t\t\t\tsum=column.reduce((prev, curr) => !isNaN(curr)?prev+(+curr):0,0);\n\t\t\t\t\t\t\tdata['avg('+item+')']=sum!=0?sum/length:null;\n\t\t\t\t\t\t});\n\t\t\t\t\telse return;\n\t\t\t\t\tbreak\n\t\t\t\tcase '$min':\n\t\t\t\t\tif (Array.isArray(items))\n\t\t\t\t\t\titems.forEach((item, i) => {\n\t\t\t\t\t\t\tlet column=Util.pluck(obj,item);\n\t\t\t\t\t\t\tlet min=Math.min( ...column);\n\t\t\t\t\t\t\tdata['min('+item+')']=isNaN(min)?null:min;\n\t\t\t\t\t\t});\n\t\t\t\t\telse return;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$max':\n\t\t\t\t\tif (Array.isArray(items))\n\t\t\t\t\t\titems.forEach((item, i) => {\n\t\t\t\t\t\t\tlet column=Util.pluck(obj,item);\n\t\t\t\t\t\t\tlet max=Math.max( ...column);\n\t\t\t\t\t\t\tdata['max('+item+')']=isNaN(max)?null:max;\n\t\t\t\t\t\t});\n\t\t\t\t\telse return;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$order':\n\t\t\t\t\tdata=Array.isArray(data)?data:obj;\n\t\t\t\t\tif (Array.isArray(items))\n\t\t\t\t\t\titems.forEach((item, i) => {\n\t\t\t\t\t\t\tlet values=item.split(':');\n\t\t\t\t\t\t\tif (!values.length==2) return;\n\t\t\t\t\t\t\tif (values[1]=='asc') data=Util.asc(data,values[0]);\n\t\t\t\t\t\t\tif (values[1]=='desc') data=Util.desc(data,values[0]);\n\t\t\t\t\t\t});\n\t\t\t\t\telse return;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdata=obj;\n\t\t\t}\n\t\t}\n\t\tif (aggregates['$limit']){\n\t\t\tvalues=aggregates['$limit'].toString().split(',');\n\t\t\tdata=Util.limit(data,+values[0],+values[1]);\n\n\t\t}\n\t\treturn data;\n\t},\n\n\tcolumns:(obj)=>{\n\t\tlet columns=new Set();\n\t\tif (!Array.isArray(obj))\n\t\t\tObject.keys(obj).forEach(item =>columns.add(item));\n\t\telse\n\t\t\tobj.forEach(row => Object.keys(row).forEach(item =>columns.add(item)));\n\t\treturn Array.from(columns);\n\t},\n\n\ttypeof:(value)=>{\n\t\tlet primitive=typeof value,format=null;\n\t\tswitch (primitive) {\n\t\t\tcase 'number':\n\t\t\t\tif (Number.isFinite(value)){\n\t\t\t\t\tif (Number.isInteger(value)) {\n\t\t\t\t\t\tprimitive='integer';\n\t\t\t\t\t\tformat='int32';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformat='float';\n\t\t\t\t\t}\n\t\t\t\t} else if (Number.isNaN(value))\n\t\t\t\t\tprimitive='NaN';\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(value)) primitive='array';\n\t\t\t\tbreak;\n\t\t\tcase 'bigint':\n\t\t\t\tprimitive='integer';\n\t\t\t\tformat='int64';\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\t//Test for base64 encoding\n\t\t\t\tif (value.slice(-1)=='=' && /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(value))\n\t\t\t\t\tformat='byte'\n\t\t\t\t//Test for rfc 3339 full-date\n\t\t\t\tif (/^[0-9]+-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])$/gm.test(value))\n\t\t\t\t\tformat='date';\n\t\t\t\t//Test for rfc 3339 date-time\n\t\t\t\tif (/^[0-9]+-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])[Tt](?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9]|60)(?:\\.[0-9]+)?(?:[Zz]|[\\+|\\-](?:[01][0-9]|2[0-3]):[0-5][0-9])$/gm.test(value))\n\t\t\t\t\tformat='date-time';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\tlet result={'type':primitive};\n\t\tif (format) result.format=format;\n\t\treturn result;\n\t},\n\n\ttypes:(obj)=>{\n\t\tlet result={};\n\t\tconst order=['number','string'];// higher index takes precedence\n\t\tconst precedence=(item,type) => typeof result[item]!='undefined'&&order.indexOf(type)<order.indexOf(result[item]) ? result[item] : type;\n\t\tif (Util.typeof(obj).type=='object'&&Object.keys(obj))\n\t\t\tObject.keys(obj).forEach(item => result[item]=Util.typeof(obj[item]));\n\t\telse\n\t\t\tobj.forEach(row => Object.keys(row).forEach(item => result[item]=precedence(item,Util.typeof(row[item]))));\n\t\treturn result;\n\t},\n\n\tcolumnsApply:(obj,columns,defaultValue=null)=>{\n\t\tif (!Array.isArray(obj)){\n\t\t\tcolumns.forEach(item => obj[item]=obj[item]||defaultValue);\n\t\t\tObject.keys(obj).forEach((key) => {if(!~columns.indexOf(key)) delete obj[key];});\n\t\t}\n\t\telse\n\t\t\tobj.forEach((row,index) => obj[index]=Util.columnsApply(row,columns));\n\t\treturn obj;\n\t},\n\n\tvaluesApply:(obj,values,query)=>{\n\t\tif (!Array.isArray(obj)){\n\t\t\tobj=Object.assign(obj, values)\n\t\t}\n\t\telse\n\t\t\tobj.forEach((row,index) => obj[index]=Util.where([row],query).length?Util.valuesApply(row,values):row);\n\t\treturn obj;\n\t},\n\n\tbtoa: string => typeof window === 'undefined'?Buffer.from(string, 'utf-8').toString('base64'):window.btoa(string),\n\n\tatob: string => typeof window === 'undefined'?Buffer.from(string, 'base64').toString('utf-8'):window.atob(string),\n\n\tremoveEmpty:(obj)=>{\n\t  Object.keys(obj).forEach(k =>\n\t    (obj[k] && typeof obj[k] === 'object') && removeEmpty(obj[k]) ||\n\t    (!obj[k] && obj[k] !== undefined) && delete obj[k]\n\t  );\n\t  return obj;\n\t},\n\n\tmime:(extension)=>{\n\t\tconst mimetypes={\n\t\t\tcsv:'text/csv',\n\t\t\tjson:'application/json',\n\t\t\tmd:'text/markdown',\n\t\t\tyaml:'application/x-yaml'\n\t\t}\n\t\treturn mimetypes[extension]||'application/octet-stream';\n\t}\n}\nmodule.exports=Util;\n"]},"metadata":{},"sourceType":"script"}