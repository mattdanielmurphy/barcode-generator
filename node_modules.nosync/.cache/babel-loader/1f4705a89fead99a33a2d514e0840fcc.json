{"ast":null,"code":"'use strict';\n\nvar annotate = require('fn-annotate');\n\nvar deprecate = require('util-deprecate');\n\nvar Expr = require('./Expr');\n\nvar errors = require('./errors');\n\nvar values = require('./values');\n\nvar objectAssign = require('object-assign');\n\nvar util = require('./_util');\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `collections/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.COLLECTIONS))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a collection ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given collection.\n * @return {Expr}\n */\n\n\nfunction Ref() {\n  arity.between(1, 2, arguments, Ref.name);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        '@ref': wrap(arguments[0])\n      });\n\n    case 2:\n      return new Expr({\n        ref: wrap(arguments[0]),\n        id: wrap(arguments[1])\n      });\n  }\n}\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\n\n\nfunction Bytes(bytes) {\n  arity.exact(1, arguments, Bytes.name);\n  return new values.Bytes(bytes);\n} // Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\n\n\nfunction Abort(msg) {\n  arity.exact(1, arguments, Abort.name);\n  return new Expr({\n    abort: wrap(msg)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\n\n\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments, At.name);\n  return new Expr({\n    at: wrap(timestamp),\n    expr: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\n\n\nfunction Let(vars, expr) {\n  arity.exact(2, arguments, Let.name);\n  var bindings = [];\n\n  if (Array.isArray(vars)) {\n    bindings = vars.map(function (item) {\n      return wrapValues(item);\n    });\n  } else {\n    bindings = Object.keys(vars).map(function (k) {\n      var b = {};\n      b[k] = wrap(vars[k]);\n      return b;\n    });\n  }\n\n  if (typeof expr === 'function') {\n    if (Array.isArray(vars)) {\n      var expr_vars = [];\n      vars.forEach(function (item) {\n        Object.keys(item).forEach(function (name) {\n          expr_vars.push(Var(name));\n        });\n      });\n      expr = expr.apply(null, expr_vars);\n    } else {\n      expr = expr.apply(null, Object.keys(vars).map(function (name) {\n        return Var(name);\n      }));\n    }\n  }\n\n  return new Expr({\n    let: bindings,\n    in: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\n\n\nfunction Var(varName) {\n  arity.exact(1, arguments, Var.name);\n  return new Expr({\n    var: wrap(varName)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\n\n\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments, If.name);\n  return new Expr({\n    if: wrap(condition),\n    then: wrap(then),\n    else: wrap(_else)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\n\n\nfunction Do() {\n  arity.min(1, arguments, Do.name);\n  var args = argsToArray(arguments);\n  return new Expr({\n    do: wrap(args)\n  });\n}\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\n\n\nvar objectFunction = function (fields) {\n  arity.exact(1, arguments, objectFunction.name);\n  return new Expr({\n    object: wrapValues(fields)\n  });\n};\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n * documentation.\n *\n * @param {module:query~ExprArg} var\n *   The names of the variables to be bound in this lambda expression.\n * @param {module:query~ExprArg} expr\n *   The lambda expression.\n * @return {Expr}\n */\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */\n\n\nfunction Lambda() {\n  arity.between(1, 2, arguments, Lambda.name);\n\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0];\n\n      if (typeof value === 'function') {\n        return _lambdaFunc(value);\n      } else if (value instanceof Expr || util.checkInstanceHasProperty(value, '_isFaunaExpr')) {\n        return value;\n      } else {\n        throw new errors.InvalidValue('Lambda function takes either a Function or an Expr.');\n      }\n\n    case 2:\n      var var_name = arguments[0];\n      var expr = arguments[1];\n      return _lambdaExpr(var_name, expr);\n  }\n}\n/**\n * @private\n */\n\n\nfunction _lambdaFunc(func) {\n  var vars = annotate(func);\n\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue('Provided Function must take at least 1 argument.');\n\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])));\n\n    default:\n      return _lambdaExpr(vars, func.apply(null, vars.map(function (name) {\n        return Var(name);\n      })));\n  }\n}\n/**\n * @private\n */\n\n\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({\n    lambda: wrap(var_name),\n    expr: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\n\n\nfunction Call(ref) {\n  arity.min(1, arguments, Call.name);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    call: wrap(ref),\n    arguments: wrap(varargs(args))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\n\n\nfunction Query(lambda) {\n  arity.exact(1, arguments, Query.name);\n  return new Expr({\n    query: wrap(lambda)\n  });\n} // Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\n\n\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments, Map.name);\n  return new Expr({\n    map: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\n\n\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments, Foreach.name);\n  return new Expr({\n    foreach: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\n\n\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments, Filter.name);\n  return new Expr({\n    filter: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\n\n\nfunction Take(number, collection) {\n  arity.exact(2, arguments, Take.name);\n  return new Expr({\n    take: wrap(number),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\n\n\nfunction Drop(number, collection) {\n  arity.exact(2, arguments, Drop.name);\n  return new Expr({\n    drop: wrap(number),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments, Prepend.name);\n  return new Expr({\n    prepend: wrap(elements),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction Append(elements, collection) {\n  arity.exact(2, arguments, Append.name);\n  return new Expr({\n    append: wrap(elements),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments, IsEmpty.name);\n  return new Expr({\n    is_empty: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments, IsNonEmpty.name);\n  return new Expr({\n    is_nonempty: wrap(collection)\n  });\n} // Type check functions\n\n/**\n * Check if the expression is a number.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnumber\">IsNumber</a>\n */\n\n\nfunction IsNumber(expr) {\n  arity.exact(1, arguments, IsNumber.name);\n  return new Expr({\n    is_number: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a double.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdouble\">IsDouble</a>\n */\n\n\nfunction IsDouble(expr) {\n  arity.exact(1, arguments, IsDouble.name);\n  return new Expr({\n    is_double: wrap(expr)\n  });\n}\n/**\n * Check if the expression is an integer.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isinteger\">IsInteger</a>\n */\n\n\nfunction IsInteger(expr) {\n  arity.exact(1, arguments, IsInteger.name);\n  return new Expr({\n    is_integer: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a boolean.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isboolean\">IsBoolean</a>\n */\n\n\nfunction IsBoolean(expr) {\n  arity.exact(1, arguments, IsBoolean.name);\n  return new Expr({\n    is_boolean: wrap(expr)\n  });\n}\n/**\n * Check if the expression is null.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnull\">IsNull</a>\n */\n\n\nfunction IsNull(expr) {\n  arity.exact(1, arguments, IsNull.name);\n  return new Expr({\n    is_null: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a byte array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isbytes\">IsBytes</a>\n */\n\n\nfunction IsBytes(expr) {\n  arity.exact(1, arguments, IsBytes.name);\n  return new Expr({\n    is_bytes: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a timestamp.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istimestamp\">IsTimestamp</a>\n */\n\n\nfunction IsTimestamp(expr) {\n  arity.exact(1, arguments, IsTimestamp.name);\n  return new Expr({\n    is_timestamp: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a date.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdate\">IsDate</a>\n */\n\n\nfunction IsDate(expr) {\n  arity.exact(1, arguments, IsDate.name);\n  return new Expr({\n    is_date: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a string.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isstring\">IsString</a>\n */\n\n\nfunction IsString(expr) {\n  arity.exact(1, arguments, IsString.name);\n  return new Expr({\n    is_string: wrap(expr)\n  });\n}\n/**\n * Check if the expression is an array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isarray\">IsArray</a>\n */\n\n\nfunction IsArray(expr) {\n  arity.exact(1, arguments, IsArray.name);\n  return new Expr({\n    is_array: wrap(expr)\n  });\n}\n/**\n * Check if the expression is an object.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isobject\">IsObject</a>\n */\n\n\nfunction IsObject(expr) {\n  arity.exact(1, arguments, IsObject.name);\n  return new Expr({\n    is_object: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a reference.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isref\">IsRef</a>\n */\n\n\nfunction IsRef(expr) {\n  arity.exact(1, arguments, IsRef.name);\n  return new Expr({\n    is_ref: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a set.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isset\">IsSet</a>\n */\n\n\nfunction IsSet(expr) {\n  arity.exact(1, arguments, IsSet.name);\n  return new Expr({\n    is_set: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a document (either a reference or an instance).\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdoc\">IsDoc</a>\n */\n\n\nfunction IsDoc(expr) {\n  arity.exact(1, arguments, IsDoc.name);\n  return new Expr({\n    is_doc: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a lambda.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/islambda\">IsLambda</a>\n */\n\n\nfunction IsLambda(expr) {\n  arity.exact(1, arguments, IsLambda.name);\n  return new Expr({\n    is_lambda: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a collection.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscollection\">IsCollection</a>\n */\n\n\nfunction IsCollection(expr) {\n  arity.exact(1, arguments, IsCollection.name);\n  return new Expr({\n    is_collection: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a database.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdatabase\">IsDatabase</a>\n */\n\n\nfunction IsDatabase(expr) {\n  arity.exact(1, arguments, IsDatabase.name);\n  return new Expr({\n    is_database: wrap(expr)\n  });\n}\n/**\n * Check if the expression is an index.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isindex\">IsIndex</a>\n */\n\n\nfunction IsIndex(expr) {\n  arity.exact(1, arguments, IsIndex.name);\n  return new Expr({\n    is_index: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a function.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isfunction\">IsFunction</a>\n */\n\n\nfunction IsFunction(expr) {\n  arity.exact(1, arguments, IsFunction.name);\n  return new Expr({\n    is_function: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a key.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iskey\">IsKey</a>\n */\n\n\nfunction IsKey(expr) {\n  arity.exact(1, arguments, IsKey.name);\n  return new Expr({\n    is_key: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a token.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istoken\">IsToken</a>\n */\n\n\nfunction IsToken(expr) {\n  arity.exact(1, arguments, IsToken.name);\n  return new Expr({\n    is_token: wrap(expr)\n  });\n}\n/**\n * Check if the expression is credentials.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscredentials\">IsCredentials</a>\n */\n\n\nfunction IsCredentials(expr) {\n  arity.exact(1, arguments, IsCredentials.name);\n  return new Expr({\n    is_credentials: wrap(expr)\n  });\n}\n/**\n * Check if the expression is a role.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isrole\">IsRole</a>\n */\n\n\nfunction IsRole(expr) {\n  arity.exact(1, arguments, IsRole.name);\n  return new Expr({\n    is_role: wrap(expr)\n  });\n} // Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the document.\n * @return {Expr}\n */\n\n\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments, Get.name);\n  ts = util.defaults(ts, null);\n  return new Expr(params({\n    get: wrap(ref)\n  }, {\n    ts: wrap(ts)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\n\n\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments, KeyFromSecret.name);\n  return new Expr({\n    key_from_secret: wrap(secret)\n  });\n}\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/reduce).\n *\n * @param {module:query~ExprArg} lambda\n *   The accumulator function\n * @param {module:query~ExprArg} initial\n *   The initial value\n * @param {module:query~ExprArg} collection\n *   The colleciton to be reduced\n * @return {Expr}\n */\n\n\nfunction Reduce(lambda, initial, collection) {\n  arity.exact(3, arguments, Reduce.name);\n  return new Expr({\n    reduce: wrap(lambda),\n    initial: wrap(initial),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\n\n\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments, Paginate.name);\n  opts = util.defaults(opts, {});\n  return new Expr(objectAssign({\n    paginate: wrap(set)\n  }, wrapValues(opts)));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the document's existence.\n * @return {Expr}\n */\n\n\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments, Exists.name);\n  ts = util.defaults(ts, null);\n  return new Expr(params({\n    exists: wrap(ref)\n  }, {\n    ts: wrap(ts)\n  }));\n} // Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a CollectionRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\n\n\nfunction Create(collection_ref, params) {\n  arity.between(1, 2, arguments, Create.name);\n  return new Expr({\n    create: wrap(collection_ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\n\n\nfunction Update(ref, params) {\n  arity.exact(2, arguments, Update.name);\n  return new Expr({\n    update: wrap(ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\n\n\nfunction Replace(ref, params) {\n  arity.exact(2, arguments, Replace.name);\n  return new Expr({\n    replace: wrap(ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\n\n\nfunction Delete(ref) {\n  arity.exact(1, arguments, Delete.name);\n  return new Expr({\n    delete: wrap(ref)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the document.\n * @return {Expr}\n */\n\n\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments, Insert.name);\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\n\n\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments, Remove.name);\n  return new Expr({\n    remove: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n *\n * @deprecated use CreateCollection instead\n */\n\n\nfunction CreateClass(params) {\n  arity.exact(1, arguments, CreateClass.name);\n  return new Expr({\n    create_class: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a collection.\n *     - name (required): the name of the collection to create\n * @return {Expr}\n */\n\n\nfunction CreateCollection(params) {\n  arity.exact(1, arguments, CreateCollection.name);\n  return new Expr({\n    create_collection: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\n\n\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments, CreateDatabase.name);\n  return new Expr({\n    create_database: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source collections and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\n\n\nfunction CreateIndex(params) {\n  arity.exact(1, arguments, CreateIndex.name);\n  return new Expr({\n    create_index: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to. Optional.\n *     - role: The role of the new key\n * @return {Expr}\n */\n\n\nfunction CreateKey(params) {\n  arity.exact(1, arguments, CreateKey.name);\n  return new Expr({\n    create_key: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\n\n\nfunction CreateFunction(params) {\n  arity.exact(1, arguments, CreateFunction.name);\n  return new Expr({\n    create_function: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new role.\n *     - name: The name of the role\n *     - privileges: An array of privileges\n *     - membership: An array of membership bindings\n * @return {Expr}\n */\n\n\nfunction CreateRole(params) {\n  arity.exact(1, arguments, CreateRole.name);\n  return new Expr({\n    create_role: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new access provider.\n *     - name: A valid schema name\n *     - issuer: A unique string\n *     - jwks_uri: A valid HTTPS URI\n *     - roles: An array of role/predicate pairs where the predicate returns a boolean.\n *                   The array can also contain Role references.\n * @return {Expr}\n */\n\n\nfunction CreateAccessProvider(params) {\n  arity.exact(1, arguments, CreateAccessProvider.name);\n  return new Expr({\n    create_access_provider: wrap(params)\n  });\n} // Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document for which to retrieve the singleton set.\n * @return {Expr}\n */\n\n\nfunction Singleton(ref) {\n  arity.exact(1, arguments, Singleton.name);\n  return new Expr({\n    singleton: wrap(ref)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\n\n\nfunction Events(ref_set) {\n  arity.exact(1, arguments, Events.name);\n  return new Expr({\n    events: wrap(ref_set)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\n\n\nfunction Match(index) {\n  arity.min(1, arguments, Match.name);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    match: wrap(index),\n    terms: wrap(varargs(args))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\n\n\nfunction Union() {\n  arity.min(1, arguments, Union.name);\n  return new Expr({\n    union: wrap(varargs(arguments))\n  });\n}\n/**\n * Merge two or more objects..\n *\n * @param {...module:query~ExprArg} merge merge the first object.\n * @param {...module:query~ExprArg} _with the second object or a list of objects\n * @param {...module:query~ExprArg} lambda a lambda to resolve possible conflicts\n * @return {Expr}\n * */\n\n\nfunction Merge(merge, _with, lambda) {\n  arity.between(2, 3, arguments, Merge.name);\n  return new Expr(params({\n    merge: wrap(merge),\n    with: wrap(_with)\n  }, {\n    lambda: wrap(lambda)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\n\n\nfunction Intersection() {\n  arity.min(1, arguments, Intersection.name);\n  return new Expr({\n    intersection: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\n\n\nfunction Difference() {\n  arity.min(1, arguments, Difference.name);\n  return new Expr({\n    difference: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\n\n\nfunction Distinct(set) {\n  arity.exact(1, arguments, Distinct.name);\n  return new Expr({\n    distinct: wrap(set)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\n\n\nfunction Join(source, target) {\n  arity.exact(2, arguments, Join.name);\n  return new Expr({\n    join: wrap(source),\n    with: wrap(target)\n  });\n}\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/range).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef of the source set\n * @param {module:query~ExprArg} from\n *   The lower bound\n * @param {module:query~ExprArg} to\n *   The upper bound\n * @return {Expr}\n */\n\n\nfunction Range(set, from, to) {\n  arity.exact(3, arguments, Range.name);\n  return new Expr({\n    range: wrap(set),\n    from: wrap(from),\n    to: wrap(to)\n  });\n} // Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\n\n\nfunction Login(ref, params) {\n  arity.exact(2, arguments, Login.name);\n  return new Expr({\n    login: wrap(ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\n\n\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments, Logout.name);\n  return new Expr({\n    logout: wrap(delete_tokens)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\n\n\nfunction Identify(ref, password) {\n  arity.exact(2, arguments, Identify.name);\n  return new Expr({\n    identify: wrap(ref),\n    password: wrap(password)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction Identity() {\n  arity.exact(0, arguments, Identity.name);\n  return new Expr({\n    identity: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction CurrentIdentity() {\n  arity.exact(0, arguments, CurrentIdentity.name);\n  return new Expr({\n    current_identity: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction HasIdentity() {\n  arity.exact(0, arguments, HasIdentity.name);\n  return new Expr({\n    has_identity: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction HasCurrentIdentity() {\n  arity.exact(0, arguments, HasCurrentIdentity.name);\n  return new Expr({\n    has_current_identity: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction CurrentToken() {\n  arity.exact(0, arguments, CurrentToken.name);\n  return new Expr({\n    current_token: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction HasCurrentToken() {\n  arity.exact(0, arguments, HasCurrentToken.name);\n  return new Expr({\n    has_current_token: null\n  });\n} // String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} strings - A list of strings to concatenate.\n * @param {string} separator  - The separator to use between each string.\n * @return {string} a single combined string\n */\n\n\nfunction Concat(strings, separator) {\n  arity.min(1, arguments, Concat.name);\n  separator = util.defaults(separator, null);\n  return new Expr(params({\n    concat: wrap(strings)\n  }, {\n    separator: wrap(separator)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} string - The string to casefold.\n * @param {string} normalizer - The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {string} a normalized string\n */\n\n\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments, Casefold.name);\n  return new Expr(params({\n    casefold: wrap(string)\n  }, {\n    normalizer: wrap(normalizer)\n  }));\n}\n/**\n * Returns true if the string contains the given substring, or false if otherwise\n *\n * @param {string} value  - the string to evaluate\n * @param {string} search - the substring to search for\n * @return {boolean}      - was the search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstr\">FaunaDB ContainsStr Function</a>\n */\n\n\nfunction ContainsStr(value, search) {\n  arity.exact(2, arguments, ContainsStr.name);\n  return new Expr({\n    containsstr: wrap(value),\n    search: wrap(search)\n  });\n}\n/**\n * Returns true if the string contains the given pattern, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} pattern - the pattern to search for\n * @return {boolean}       - was the regex search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstrregex\">FaunaDB ContainsStrRegex Function</a>\n */\n\n\nfunction ContainsStrRegex(value, pattern) {\n  arity.exact(2, arguments, ContainsStrRegex.name);\n  return new Expr({\n    containsstrregex: wrap(value),\n    pattern: wrap(pattern)\n  });\n}\n/**\n * Returns true if the string starts with the given prefix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the prefix to search for\n * @return {boolean}       - does `value` start with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/startswith\">FaunaDB StartsWith Function</a>\n */\n\n\nfunction StartsWith(value, search) {\n  arity.exact(2, arguments, StartsWith.name);\n  return new Expr({\n    startswith: wrap(value),\n    search: wrap(search)\n  });\n}\n/**\n * Returns true if the string ends with the given suffix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the suffix to search for\n * @return {boolean}       - does `value` end with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/endswith\">FaunaDB EndsWith Function</a>\n */\n\n\nfunction EndsWith(value, search) {\n  arity.exact(2, arguments, EndsWith.name);\n  return new Expr({\n    endswith: wrap(value),\n    search: wrap(search)\n  });\n}\n/**\n * It takes a string and returns a regex which matches the input string verbatim.\n *\n * @param value      - the string to analyze\n * @return {string}  - a regex which matches the input string verbatim\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/regexescape\">FaunaDB RegexEscape Function</a>\n */\n\n\nfunction RegexEscape(value) {\n  arity.exact(1, arguments, RegexEscape.name);\n  return new Expr({\n    regexescape: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - Find the first position of this string in the search string\n * @param {int} start - An optional start offset into the search string\n * @return {int} location of the found string or -1 if not found\n */\n\n\nfunction FindStr(value, find, start) {\n  arity.between(2, 3, arguments, FindStr.name);\n  start = util.defaults(start, null);\n  return new Expr(params({\n    findstr: wrap(value),\n    find: wrap(find)\n  }, {\n    start: wrap(start)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - Find the first position of this pattern in the search string using a java regular expression syntax\n * @param {int} start - An optional start offset into the search string\n * @param {int} numResults - An optional number of results to return, max 1024\n * @return {Array} an array of object describing where the search pattern was located\n */\n\n\nfunction FindStrRegex(value, pattern, start, numResults) {\n  arity.between(2, 4, arguments, FindStrRegex.name);\n  start = util.defaults(start, null);\n  return new Expr(params({\n    findstrregex: wrap(value),\n    pattern: wrap(pattern)\n  }, {\n    start: wrap(start),\n    num_results: wrap(numResults)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to calculate the length in codepoints.\n * @return {int} the length of the string in codepoints\n */\n\n\nfunction Length(value) {\n  arity.exact(1, arguments, Length.name);\n  return new Expr({\n    length: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to LowerCase.\n * @return {string} the string converted to lowercase\n */\n\n\nfunction LowerCase(value) {\n  arity.exact(1, arguments, LowerCase.name);\n  return new Expr({\n    lowercase: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to trim leading white space.\n * @return {string} the string with leading white space removed\n */\n\n\nfunction LTrim(value) {\n  arity.exact(1, arguments, LTrim.name);\n  return new Expr({\n    ltrim: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Array|Value}\n */\n\n\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments, NGram.name);\n  min = util.defaults(min, null);\n  max = util.defaults(max, null);\n  return new Expr(params({\n    ngram: wrap(terms)\n  }, {\n    min: wrap(min),\n    max: wrap(max)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to repeat.\n * @param {int} number - The number of times to repeat the string\n * @return {string} a string which was repeated\n */\n\n\nfunction Repeat(value, number) {\n  arity.between(1, 2, arguments, Repeat.name);\n  number = util.defaults(number, null);\n  return new Expr(params({\n    repeat: wrap(value)\n  }, {\n    number: wrap(number)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - The string to find in the search string\n * @param {string} replace - The string to replace in the search string\n * @return {String} all the occurrences of find substituted with replace string\n */\n\n\nfunction ReplaceStr(value, find, replace) {\n  arity.exact(3, arguments, ReplaceStr.name);\n  return new Expr({\n    replacestr: wrap(value),\n    find: wrap(find),\n    replace: wrap(replace)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - The pattern to find in the search string using a java regular expression syntax\n * @param {string} replace - The string to replace in the search string\n * @param {boolean} first - Replace all or just the first\n * @return {string} all the occurrences of find pattern substituted with replace string\n */\n\n\nfunction ReplaceStrRegex(value, pattern, replace, first) {\n  arity.between(3, 4, arguments, ReplaceStrRegex.name);\n  first = util.defaults(first, null);\n  return new Expr(params({\n    replacestrregex: wrap(value),\n    pattern: wrap(pattern),\n    replace: wrap(replace)\n  }, {\n    first: wrap(first)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to remove white space from the end.\n * @return {string} the string with trailing whitespaces removed\n */\n\n\nfunction RTrim(value) {\n  arity.exact(1, arguments, RTrim.name);\n  return new Expr({\n    rtrim: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {int} num - The string of N Space(s).\n * @return {string} a string with spaces\n */\n\n\nfunction Space(num) {\n  arity.exact(1, arguments, Space.name);\n  return new Expr({\n    space: wrap(num)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value  The string to SubString.\n * @param {int} start  The position the first character of the return string begins at\n * @param {int} length  An optional length, if omitted then returns to the end of string\n * @return {string}\n */\n\n\nfunction SubString(value, start, length) {\n  arity.between(1, 3, arguments, SubString.name);\n  start = util.defaults(start, null);\n  length = util.defaults(length, null);\n  return new Expr(params({\n    substring: wrap(value)\n  }, {\n    start: wrap(start),\n    length: wrap(length)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to TitleCase.\n * @return {string}  A string converted to titlecase\n */\n\n\nfunction TitleCase(value) {\n  arity.exact(1, arguments, TitleCase.name);\n  return new Expr({\n    titlecase: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Trim.\n * @return {string} a string with leading and trailing whitespace removed\n */\n\n\nfunction Trim(value) {\n  arity.exact(1, arguments, Trim.name);\n  return new Expr({\n    trim: wrap(value)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Uppercase.\n * @return {string} An uppercase string\n */\n\n\nfunction UpperCase(value) {\n  arity.exact(1, arguments, UpperCase.name);\n  return new Expr({\n    uppercase: wrap(value)\n  });\n}\n/**\n * Format values into a string.\n *\n * @param  {string}  string string with format specifiers\n * @param  {array}   values list of values to format\n * @return {string}         a string\n */\n\n\nfunction Format(string) {\n  arity.min(1, arguments, Format.name);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    format: wrap(string),\n    values: wrap(varargs(args))\n  });\n} // Time and date functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to converted to a time object.\n * @return {Expr}\n */\n\n\nfunction Time(string) {\n  arity.exact(1, arguments, Time.name);\n  return new Expr({\n    time: wrap(string)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\n\n\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments, Epoch.name);\n  return new Expr({\n    epoch: wrap(number),\n    unit: wrap(unit)\n  });\n}\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timeadd).\n *\n * Returns a new time or date with the offset in terms of the unit\n * added.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\n\n\nfunction TimeAdd(base, offset, unit) {\n  arity.exact(3, arguments, TimeAdd.name);\n  return new Expr({\n    time_add: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit)\n  });\n}\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract).\n *\n * Returns a new time or date with the offset in terms of the unit\n * subtracted.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\n\n\nfunction TimeSubtract(base, offset, unit) {\n  arity.exact(3, arguments, TimeSubtract.name);\n  return new Expr({\n    time_subtract: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit)\n  });\n}\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timediff).\n *\n * Returns the number of intervals in terms of the unit between\n * two times or dates. Both start and finish must be of the same\n * type.\n *\n * @param start the starting time or date, inclusive\n * @param finish the ending time or date, exclusive\n * @param unit the unit type\n * @return {Expr}\n */\n\n\nfunction TimeDiff(start, finish, unit) {\n  arity.exact(3, arguments, TimeDiff.name);\n  return new Expr({\n    time_diff: wrap(start),\n    other: wrap(finish),\n    unit: wrap(unit)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\n\n\nfunction Date(string) {\n  arity.exact(1, arguments, Date.name);\n  return new Expr({\n    date: wrap(string)\n  });\n}\n/**\n * Returns the current snapshot time.\n *\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/now\">Now function</a>\n */\n\n\nfunction Now() {\n  arity.exact(0, arguments, Now.name);\n  return new Expr({\n    now: wrap(null)\n  });\n} // Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\n\n\nfunction NextId() {\n  arity.exact(0, arguments, NextId.name);\n  return new Expr({\n    next_id: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\n\n\nfunction NewId() {\n  arity.exact(0, arguments, NewId.name);\n  return new Expr({\n    new_id: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\n\n\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments, Database.name);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        database: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        database: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\n\n\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments, Index.name);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        index: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        index: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n *\n * @deprecated Class is deprecated, use Collection instead\n */\n\n\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments, Class.name);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        class: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        class: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the collection.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection's scope.\n * @return {Expr}\n */\n\n\nfunction Collection(name, scope) {\n  arity.between(1, 2, arguments, Collection.name);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        collection: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        collection: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\n\n\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments, FunctionFn.name);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        function: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        function: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the role.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role's scope.\n * @return {Expr}\n */\n\n\nfunction Role(name, scope) {\n  arity.between(1, 2, arguments, Role.name);\n  scope = util.defaults(scope, null);\n  return new Expr(params({\n    role: wrap(name)\n  }, {\n    scope: wrap(scope)\n  }));\n}\n/**\n *\n * @param {module:query~ExprArg} scope\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\n\n\nfunction AccessProviders(scope) {\n  arity.max(1, arguments, AccessProviders.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    access_providers: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\n\n\nfunction Classes(scope) {\n  arity.max(1, arguments, Classes.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    classes: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `collections` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection set's scope.\n * @return {Expr}\n */\n\n\nfunction Collections(scope) {\n  arity.max(1, arguments, Collections.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    collections: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\n\n\nfunction Databases(scope) {\n  arity.max(1, arguments, Databases.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    databases: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\n\n\nfunction Indexes(scope) {\n  arity.max(1, arguments, Indexes.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    indexes: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\n\n\nfunction Functions(scope) {\n  arity.max(1, arguments, Functions.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    functions: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `roles` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role set's scope.\n * @return {Expr}\n */\n\n\nfunction Roles(scope) {\n  arity.max(1, arguments, Roles.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    roles: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\n\n\nfunction Keys(scope) {\n  arity.max(1, arguments, Keys.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    keys: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\n\n\nfunction Tokens(scope) {\n  arity.max(1, arguments, Tokens.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    tokens: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\n\n\nfunction Credentials(scope) {\n  arity.max(1, arguments, Credentials.name);\n  scope = util.defaults(scope, null);\n  return new Expr({\n    credentials: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\n\n\nfunction Equals() {\n  arity.min(1, arguments, Equals.name);\n  return new Expr({\n    equals: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n *\n * @deprecated use ContainsPath instead\n */\n\n\nfunction Contains(path, _in) {\n  arity.exact(2, arguments, Contains.name);\n  return new Expr({\n    contains: wrap(path),\n    in: wrap(_in)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} value\n *   Represent the value we want to search for.\n * @param {module:query~ExprArg} in\n *   An object we will search for the value passed in.\n * @return {Expr}\n */\n\n\nfunction ContainsValue(value, _in) {\n  arity.exact(2, arguments, ContainsValue.name);\n  return new Expr({\n    contains_value: wrap(value),\n    in: wrap(_in)\n  });\n}\n/**\n * @param {string} field\n *   A field name we want to confirm exists.\n * @param {module:query~ExprArg} obj\n *   An object to search against.\n * @return {Expr}\n */\n\n\nfunction ContainsField(field, obj) {\n  arity.exact(2, arguments, ContainsField.name);\n  return new Expr({\n    contains_field: wrap(field),\n    in: wrap(obj)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\n\n\nfunction ContainsPath(path, _in) {\n  arity.exact(2, arguments, ContainsPath.name);\n  return new Expr({\n    contains_path: wrap(path),\n    in: wrap(_in)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\n\n\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments, Select.name);\n  var exprObj = {\n    select: wrap(path),\n    from: wrap(from)\n  };\n\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default);\n  }\n\n  return new Expr(exprObj);\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n *\n * @deprecated avoid using\n */\n\n\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments, SelectAll.name);\n  return new Expr({\n    select_all: wrap(path),\n    from: wrap(from)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the absolute value.\n * @return {Expr}\n */\n\n\nfunction Abs(expr) {\n  arity.exact(1, arguments, Abs.name);\n  return new Expr({\n    abs: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\n\n\nfunction Add() {\n  arity.min(1, arguments, Add.name);\n  return new Expr({\n    add: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise and together.\n * @return {Expr}\n */\n\n\nfunction BitAnd() {\n  arity.min(1, arguments, BitAnd.name);\n  return new Expr({\n    bitand: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the bitwise not.\n * @return {Expr}\n */\n\n\nfunction BitNot(expr) {\n  arity.exact(1, arguments, BitNot.name);\n  return new Expr({\n    bitnot: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Or'd together.\n * @return {Expr}\n */\n\n\nfunction BitOr() {\n  arity.min(1, arguments, BitOr.name);\n  return new Expr({\n    bitor: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Xor'd together.\n * @return {Expr}\n */\n\n\nfunction BitXor() {\n  arity.min(1, arguments, BitXor.name);\n  return new Expr({\n    bitxor: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The least integer that is greater than or equal to the number\n * @return {Expr}\n */\n\n\nfunction Ceil(expr) {\n  arity.exact(1, arguments, Ceil.name);\n  return new Expr({\n    ceil: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\n\n\nfunction Divide() {\n  arity.min(1, arguments, Divide.name);\n  return new Expr({\n    divide: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The greatest integer that is less than or equal to the number\n * @return {Expr}\n */\n\n\nfunction Floor(expr) {\n  arity.exact(1, arguments, Floor.name);\n  return new Expr({\n    floor: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\n\n\nfunction Max() {\n  arity.min(1, arguments, Max.name);\n  return new Expr({\n    max: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\n\n\nfunction Min() {\n  arity.min(1, arguments, Min.name);\n  return new Expr({\n    min: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\n\n\nfunction Modulo() {\n  arity.min(1, arguments, Modulo.name);\n  return new Expr({\n    modulo: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\n\n\nfunction Multiply() {\n  arity.min(1, arguments, Multiply.name);\n  return new Expr({\n    multiply: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to round.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\n\n\nfunction Round(value, precision) {\n  arity.min(1, arguments, Round.name);\n  precision = util.defaults(precision, null);\n  return new Expr(params({\n    round: wrap(value)\n  }, {\n    precision: wrap(precision)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\n\n\nfunction Subtract() {\n  arity.min(1, arguments, Subtract.name);\n  return new Expr({\n    subtract: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sign of the number is returned as positive 1, zero 0 , negative -1\n * @return {Expr}\n */\n\n\nfunction Sign(expr) {\n  arity.exact(1, arguments, Sign.name);\n  return new Expr({\n    sign: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The square root of the number\n * @return {Expr}\n */\n\n\nfunction Sqrt(expr) {\n  arity.exact(1, arguments, Sqrt.name);\n  return new Expr({\n    sqrt: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to truncate.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\n\n\nfunction Trunc(value, precision) {\n  arity.min(1, arguments, Trunc.name);\n  precision = util.defaults(precision, null);\n  return new Expr(params({\n    trunc: wrap(value)\n  }, {\n    precision: wrap(precision)\n  }));\n}\n/**\n *\n * Count the number of elements in the collection.\n *\n * @param {array}    - array of items\n * @return {integer} - number of items in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/count\">Count function</a>\n */\n\n\nfunction Count(collection) {\n  arity.exact(1, arguments, Count.name);\n  return new Expr({\n    count: wrap(collection)\n  });\n}\n/**\n *\n * Sum the elements in the collection.\n *\n * @param {array} - collection of numbers\n * @return {integer} - total of all numbers in collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/sum\">Sum function</a>\n */\n\n\nfunction Sum(collection) {\n  arity.exact(1, arguments, Sum.name);\n  return new Expr({\n    sum: wrap(collection)\n  });\n}\n/**\n *\n * Returns the mean of all elements in the collection.\n *\n * @param {array} - collection the numbers\n * @return {float} - the mean of all numbers in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/mean\">Mean function</a>\n */\n\n\nfunction Mean(collection) {\n  arity.exact(1, arguments, Mean.name);\n  return new Expr({\n    mean: wrap(collection)\n  });\n}\n/**\n *\n * Evaluates to true if any element of the collection is true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/any\">Any function</a>\n */\n\n\nfunction Any(collection) {\n  arity.exact(1, arguments, Any.name);\n  return new Expr({\n    any: wrap(collection)\n  });\n}\n/**\n *\n * Evaluates to true if all elements of the collection are true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/all\">All function</a>\n */\n\n\nfunction All(collection) {\n  arity.exact(1, arguments, All.name);\n  return new Expr({\n    all: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc cosine of the number\n * @return {Expr}\n */\n\n\nfunction Acos(expr) {\n  arity.exact(1, arguments, Acos.name);\n  return new Expr({\n    acos: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc sine of the number\n * @return {Expr}\n */\n\n\nfunction Asin(expr) {\n  arity.exact(1, arguments, Asin.name);\n  return new Expr({\n    asin: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc tangent of the number\n * @return {Expr}\n */\n\n\nfunction Atan(expr) {\n  arity.exact(1, arguments, Atan.name);\n  return new Expr({\n    atan: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The cosine of a number\n * @return {Expr}\n */\n\n\nfunction Cos(expr) {\n  arity.exact(1, arguments, Cos.name);\n  return new Expr({\n    cos: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic cosine of the number\n * @return {Expr}\n */\n\n\nfunction Cosh(expr) {\n  arity.exact(1, arguments, Cosh.name);\n  return new Expr({\n    cosh: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take radians and convert it to degrees 360 degrees = 2 * pi radians\n * @return {Expr}\n */\n\n\nfunction Degrees(expr) {\n  arity.exact(1, arguments, Degrees.name);\n  return new Expr({\n    degrees: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The e raised to an exponent number\n * @return {Expr}\n */\n\n\nfunction Exp(expr) {\n  arity.exact(1, arguments, Exp.name);\n  return new Expr({\n    exp: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A side of the right triangle\n * @param {...module:query~ExprArg} terms\n *   The second side of a right triange, defaults to the first side\n * @return {Expr}\n */\n\n\nfunction Hypot(value, side) {\n  arity.min(1, arguments, Hypot.name);\n  side = util.defaults(side, null);\n  return new Expr(params({\n    hypot: wrap(value)\n  }, {\n    b: wrap(side)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The natural log of the number\n * @return {Expr}\n */\n\n\nfunction Ln(expr) {\n  arity.exact(1, arguments, Ln.name);\n  return new Expr({\n    ln: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The log base 10 of a number\n * @return {Expr}\n */\n\n\nfunction Log(expr) {\n  arity.exact(1, arguments, Log.name);\n  return new Expr({\n    log: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to raise to the power.\n * @param {...module:query~ExprArg} terms\n *   An optional exponent\n * @return {Expr}\n */\n\n\nfunction Pow(value, exponent) {\n  arity.min(1, arguments, Pow.name);\n  exponent = util.defaults(exponent, null);\n  return new Expr(params({\n    pow: wrap(value)\n  }, {\n    exp: wrap(exponent)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take degrees and convert the number to radians 2 * pi = 360 degrees\n * @return {Expr}\n */\n\n\nfunction Radians(expr) {\n  arity.exact(1, arguments, Radians.name);\n  return new Expr({\n    radians: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sine of a number\n * @return {Expr}\n */\n\n\nfunction Sin(expr) {\n  arity.exact(1, arguments, Sin.name);\n  return new Expr({\n    sin: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic sine of a number\n * @return {Expr}\n */\n\n\nfunction Sinh(expr) {\n  arity.exact(1, arguments, Sinh.name);\n  return new Expr({\n    sinh: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The Tangent of a number\n * @return {Expr}\n */\n\n\nfunction Tan(expr) {\n  arity.exact(1, arguments, Tan.name);\n  return new Expr({\n    tan: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyberbolic tangent of a number\n * @return {Expr}\n */\n\n\nfunction Tanh(expr) {\n  arity.exact(1, arguments, Tanh.name);\n  return new Expr({\n    tanh: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction LT() {\n  arity.min(1, arguments, LT.name);\n  return new Expr({\n    lt: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction LTE() {\n  arity.min(1, arguments, LTE.name);\n  return new Expr({\n    lte: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction GT() {\n  arity.min(1, arguments, GT.name);\n  return new Expr({\n    gt: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction GTE() {\n  arity.min(1, arguments, GTE.name);\n  return new Expr({\n    gte: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\n\n\nfunction And() {\n  arity.min(1, arguments, And.name);\n  return new Expr({\n    and: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\n\n\nfunction Or() {\n  arity.min(1, arguments, Or.name);\n  return new Expr({\n    or: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\n\n\nfunction Not(boolean) {\n  arity.exact(1, arguments, Not.name);\n  return new Expr({\n    not: wrap(boolean)\n  });\n}\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\n\n\nfunction ToString(expr) {\n  arity.exact(1, arguments, ToString.name);\n  return new Expr({\n    to_string: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\n\n\nfunction ToNumber(expr) {\n  arity.exact(1, arguments, ToNumber.name);\n  return new Expr({\n    to_number: wrap(expr)\n  });\n}\n/**\n * Converts an expression to an Object.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Object.\n * @return {Expr}\n */\n\n\nfunction ToObject(expr) {\n  arity.exact(1, arguments, ToObject.name);\n  return new Expr({\n    to_object: wrap(expr)\n  });\n}\n/**\n * Converts an expression to an Array.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Array.\n * @return {Expr}\n */\n\n\nfunction ToArray(expr) {\n  arity.exact(1, arguments, ToArray.name);\n  return new Expr({\n    to_array: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a double value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a double.\n * @return {Expr}\n */\n\n\nfunction ToDouble(expr) {\n  arity.exact(1, arguments, ToDouble.name);\n  return new Expr({\n    to_double: wrap(expr)\n  });\n}\n/**\n * Converts an expression to an integer value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an integer.\n * @return {Expr}\n */\n\n\nfunction ToInteger(expr) {\n  arity.exact(1, arguments, ToInteger.name);\n  return new Expr({\n    to_integer: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\n\n\nfunction ToTime(expr) {\n  arity.exact(1, arguments, ToTime.name);\n  return new Expr({\n    to_time: wrap(expr)\n  });\n}\n/**\n * Converts an expression evaluating to a time to seconds since epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to seconds numeric value.\n * @return {Expr}\n */\n\n\nfunction ToSeconds(expr) {\n  arity.exact(1, arguments, ToSeconds.name);\n  return new Expr({\n    to_seconds: wrap(expr)\n  });\n}\n/**\n * Converts a time expression to milliseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to millisecond numeric value.\n * @return {Expr}\n */\n\n\nfunction ToMillis(expr) {\n  arity.exact(1, arguments, ToMillis.name);\n  return new Expr({\n    to_millis: wrap(expr)\n  });\n}\n/**\n * Converts a time expression to microseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to microsecond numeric value.\n * @return {Expr}\n */\n\n\nfunction ToMicros(expr) {\n  arity.exact(1, arguments, ToMicros.name);\n  return new Expr({\n    to_micros: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's day of the week following ISO-8601 convention, from 1 (Monday) to 7 (Sunday).\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of week.\n * @return {Expr}\n */\n\n\nfunction DayOfWeek(expr) {\n  arity.exact(1, arguments, DayOfWeek.name);\n  return new Expr({\n    day_of_week: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's day of the year, from 1 to 365, or 366 in a leap year.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of year.\n * @return {Expr}\n */\n\n\nfunction DayOfYear(expr) {\n  arity.exact(1, arguments, DayOfYear.name);\n  return new Expr({\n    day_of_year: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's day of the month, from 1 to 31.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of month.\n * @return {Expr}\n */\n\n\nfunction DayOfMonth(expr) {\n  arity.exact(1, arguments, DayOfMonth.name);\n  return new Expr({\n    day_of_month: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a hour.\n * @return {Expr}\n */\n\n\nfunction Hour(expr) {\n  arity.exact(1, arguments, Hour.name);\n  return new Expr({\n    hour: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\n\n\nfunction Minute(expr) {\n  arity.exact(1, arguments, Minute.name);\n  return new Expr({\n    minute: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\n\n\nfunction Second(expr) {\n  arity.exact(1, arguments, Second.name);\n  return new Expr({\n    second: wrap(expr)\n  });\n}\n/**\n * Returns a time expression's month of the year, from 1 to 12.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\n\n\nfunction Month(expr) {\n  arity.exact(1, arguments, Month.name);\n  return new Expr({\n    month: wrap(expr)\n  });\n}\n/**\n * Returns the time expression's year, following the ISO-8601 standard.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a year.\n * @return {Expr}\n */\n\n\nfunction Year(expr) {\n  arity.exact(1, arguments, Year.name);\n  return new Expr({\n    year: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\n\n\nfunction ToDate(expr) {\n  arity.exact(1, arguments, ToDate.name);\n  return new Expr({\n    to_date: wrap(expr)\n  });\n}\n/**\n * Move database to a new hierarchy.\n *\n * @param {string}  from database reference to be moved.\n * @param {string}  to new parent database reference.\n * @return {Expr}   The expression wrapping the provided object.\n * @see <a href=\"https://app.fauna.com/documentation/reference/queryapi#write-functions\">FaunaDB Write Functions</a>\n */\n\n\nfunction MoveDatabase(from, to) {\n  arity.exact(2, arguments, MoveDatabase.name);\n  return new Expr({\n    move_database: wrap(from),\n    to: wrap(to)\n  });\n}\n/**\n * Returns a set of all documents in the given collection.\n * A set must be paginated in order to retrieve its values.\n *\n * @param collection a reference to the collection. Type: Ref\n * @return a new {@link Expr} instance\n * @see #Paginate(Expr)\n */\n\n\nfunction Documents(collection) {\n  arity.exact(1, arguments, Documents.name);\n  return new Expr({\n    documents: wrap(collection)\n  });\n}\n/**\n *\n * @param {module:query~ExprArg} expr\n *  An expression (i.e. Set, Page, or Array) to reverse\n * @return {Expr}\n */\n\n\nfunction Reverse(expr) {\n  arity.exact(1, arguments, Reverse.name);\n  return new Expr({\n    reverse: wrap(expr)\n  });\n}\n/**\n *\n * @param {module:query~ExprArg} name\n * A string representing an AccessProvider's name\n * @return {Expr}\n */\n\n\nfunction AccessProvider(name) {\n  arity.exact(1, arguments, AccessProvider.name);\n  return new Expr({\n    access_provider: wrap(name)\n  });\n} // Helpers\n\n/**\n * @ignore\n */\n\n\nfunction arity(min, max, args, callerFunc) {\n  if (min !== null && args.length < min || max !== null && args.length > max) {\n    throw new errors.InvalidArity(min, max, args.length, callerFunc);\n  }\n}\n\narity.exact = function (n, args, callerFunc) {\n  arity(n, n, args, callerFunc);\n};\n\narity.max = function (n, args, callerFunc) {\n  arity(null, n, args, callerFunc);\n};\n\narity.min = function (n, args, callerFunc) {\n  arity(n, null, args, callerFunc);\n};\n\narity.between = function (min, max, args, callerFunc) {\n  arity(min, max, args, callerFunc);\n};\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\n\n\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key];\n\n    if (val !== null && val !== undefined) {\n      mainParams[key] = val;\n    }\n  }\n\n  return mainParams;\n}\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\n\n\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values) ? values : Array.prototype.slice.call(values);\n  return values.length === 1 ? values[0] : valuesAsArr;\n}\n/**\n * @ignore\n */\n\n\nfunction argsToArray(args) {\n  var rv = [];\n  rv.push.apply(rv, args);\n  return rv;\n}\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\n\n\nfunction wrap(obj) {\n  arity.exact(1, arguments, wrap.name);\n\n  if (obj === null) {\n    return null;\n  } else if (obj instanceof Expr || util.checkInstanceHasProperty(obj, '_isFaunaExpr')) {\n    return obj;\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function (str, symbol) {\n      return symbol;\n    });\n  } else if (typeof obj === 'function') {\n    return Lambda(obj);\n  } else if (Array.isArray(obj)) {\n    return new Expr(obj.map(function (elem) {\n      return wrap(elem);\n    }));\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj);\n  } else if (typeof obj === 'object') {\n    return new Expr({\n      object: wrapValues(obj)\n    });\n  } else {\n    return obj;\n  }\n}\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\n\n\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {};\n    Object.keys(obj).forEach(function (key) {\n      rv[key] = wrap(obj[key]);\n    });\n    return rv;\n  } else {\n    return null;\n  }\n}\n\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  IsNumber: IsNumber,\n  IsDouble: IsDouble,\n  IsInteger: IsInteger,\n  IsBoolean: IsBoolean,\n  IsNull: IsNull,\n  IsBytes: IsBytes,\n  IsTimestamp: IsTimestamp,\n  IsDate: IsDate,\n  IsString: IsString,\n  IsArray: IsArray,\n  IsObject: IsObject,\n  IsRef: IsRef,\n  IsSet: IsSet,\n  IsDoc: IsDoc,\n  IsLambda: IsLambda,\n  IsCollection: IsCollection,\n  IsDatabase: IsDatabase,\n  IsIndex: IsIndex,\n  IsFunction: IsFunction,\n  IsKey: IsKey,\n  IsToken: IsToken,\n  IsCredentials: IsCredentials,\n  IsRole: IsRole,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Reduce: Reduce,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: deprecate(CreateClass, 'CreateClass() is deprecated, use CreateCollection() instead'),\n  CreateCollection: CreateCollection,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  CreateRole: CreateRole,\n  CreateAccessProvider: CreateAccessProvider,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Merge: Merge,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Range: Range,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: deprecate(Identity, 'Identity() is deprecated, use CurrentIdentity() instead'),\n  CurrentIdentity: CurrentIdentity,\n  HasIdentity: deprecate(HasIdentity, 'HasIdentity() is deprecated, use HasCurrentIdentity() instead'),\n  HasCurrentIdentity: HasCurrentIdentity,\n  CurrentToken: CurrentToken,\n  HasCurrentToken: HasCurrentToken,\n  Concat: Concat,\n  Casefold: Casefold,\n  ContainsStr: ContainsStr,\n  ContainsStrRegex: ContainsStrRegex,\n  StartsWith: StartsWith,\n  EndsWith: EndsWith,\n  FindStr: FindStr,\n  FindStrRegex: FindStrRegex,\n  Length: Length,\n  LowerCase: LowerCase,\n  LTrim: LTrim,\n  NGram: NGram,\n  Repeat: Repeat,\n  ReplaceStr: ReplaceStr,\n  ReplaceStrRegex: ReplaceStrRegex,\n  RegexEscape: RegexEscape,\n  RTrim: RTrim,\n  Space: Space,\n  SubString: SubString,\n  TitleCase: TitleCase,\n  Trim: Trim,\n  UpperCase: UpperCase,\n  Format: Format,\n  Time: Time,\n  TimeAdd: TimeAdd,\n  TimeSubtract: TimeSubtract,\n  TimeDiff: TimeDiff,\n  Epoch: Epoch,\n  Date: Date,\n  Now: Now,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: deprecate(Class, 'Class() is deprecated, use Collection() instead'),\n  Collection: Collection,\n  Function: FunctionFn,\n  Role: Role,\n  AccessProviders: AccessProviders,\n  Classes: deprecate(Classes, 'Classes() is deprecated, use Collections() instead'),\n  Collections: Collections,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Roles: Roles,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: deprecate(Contains, 'Contains() is deprecated, use ContainsPath() instead'),\n  ContainsPath: ContainsPath,\n  ContainsField: ContainsField,\n  ContainsValue: ContainsValue,\n  Select: Select,\n  SelectAll: deprecate(SelectAll, 'SelectAll() is deprecated. Avoid use.'),\n  Abs: Abs,\n  Add: Add,\n  BitAnd: BitAnd,\n  BitNot: BitNot,\n  BitOr: BitOr,\n  BitXor: BitXor,\n  Ceil: Ceil,\n  Divide: Divide,\n  Floor: Floor,\n  Max: Max,\n  Min: Min,\n  Modulo: Modulo,\n  Multiply: Multiply,\n  Round: Round,\n  Subtract: Subtract,\n  Sign: Sign,\n  Sqrt: Sqrt,\n  Trunc: Trunc,\n  Count: Count,\n  Sum: Sum,\n  Mean: Mean,\n  Any: Any,\n  All: All,\n  Acos: Acos,\n  Asin: Asin,\n  Atan: Atan,\n  Cos: Cos,\n  Cosh: Cosh,\n  Degrees: Degrees,\n  Exp: Exp,\n  Hypot: Hypot,\n  Ln: Ln,\n  Log: Log,\n  Pow: Pow,\n  Radians: Radians,\n  Sin: Sin,\n  Sinh: Sinh,\n  Tan: Tan,\n  Tanh: Tanh,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToObject: ToObject,\n  ToArray: ToArray,\n  ToDouble: ToDouble,\n  ToInteger: ToInteger,\n  ToTime: ToTime,\n  ToSeconds: ToSeconds,\n  ToMicros: ToMicros,\n  ToMillis: ToMillis,\n  DayOfMonth: DayOfMonth,\n  DayOfWeek: DayOfWeek,\n  DayOfYear: DayOfYear,\n  Second: Second,\n  Minute: Minute,\n  Hour: Hour,\n  Month: Month,\n  Year: Year,\n  ToDate: ToDate,\n  MoveDatabase: MoveDatabase,\n  Documents: Documents,\n  Reverse: Reverse,\n  AccessProvider: AccessProvider,\n  wrap: wrap\n};","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/faunadb/src/query.js"],"names":["annotate","require","deprecate","Expr","errors","values","objectAssign","util","Ref","arity","between","arguments","name","length","wrap","ref","id","Bytes","bytes","exact","Abort","msg","abort","At","timestamp","expr","at","Let","vars","bindings","Array","isArray","map","item","wrapValues","Object","keys","k","b","expr_vars","forEach","push","Var","apply","let","in","varName","var","If","condition","then","_else","if","else","Do","min","args","argsToArray","do","objectFunction","fields","object","Lambda","value","_lambdaFunc","checkInstanceHasProperty","InvalidValue","var_name","_lambdaExpr","func","lambda","Call","shift","call","varargs","Query","query","Map","collection","lambda_expr","Foreach","foreach","Filter","filter","Take","number","take","Drop","drop","Prepend","elements","prepend","Append","append","IsEmpty","is_empty","IsNonEmpty","is_nonempty","IsNumber","is_number","IsDouble","is_double","IsInteger","is_integer","IsBoolean","is_boolean","IsNull","is_null","IsBytes","is_bytes","IsTimestamp","is_timestamp","IsDate","is_date","IsString","is_string","IsArray","is_array","IsObject","is_object","IsRef","is_ref","IsSet","is_set","IsDoc","is_doc","IsLambda","is_lambda","IsCollection","is_collection","IsDatabase","is_database","IsIndex","is_index","IsFunction","is_function","IsKey","is_key","IsToken","is_token","IsCredentials","is_credentials","IsRole","is_role","Get","ts","defaults","params","get","KeyFromSecret","secret","key_from_secret","Reduce","initial","reduce","Paginate","set","opts","paginate","Exists","exists","Create","collection_ref","create","Update","update","Replace","replace","Delete","delete","Insert","action","insert","Remove","remove","CreateClass","create_class","CreateCollection","create_collection","CreateDatabase","create_database","CreateIndex","create_index","CreateKey","create_key","CreateFunction","create_function","CreateRole","create_role","CreateAccessProvider","create_access_provider","Singleton","singleton","Events","ref_set","events","Match","index","match","terms","Union","union","Merge","merge","_with","with","Intersection","intersection","Difference","difference","Distinct","distinct","Join","source","target","join","Range","from","to","range","Login","login","Logout","delete_tokens","logout","Identify","password","identify","Identity","identity","CurrentIdentity","current_identity","HasIdentity","has_identity","HasCurrentIdentity","has_current_identity","CurrentToken","current_token","HasCurrentToken","has_current_token","Concat","strings","separator","concat","Casefold","string","normalizer","casefold","ContainsStr","search","containsstr","ContainsStrRegex","pattern","containsstrregex","StartsWith","startswith","EndsWith","endswith","RegexEscape","regexescape","FindStr","find","start","findstr","FindStrRegex","numResults","findstrregex","num_results","Length","LowerCase","lowercase","LTrim","ltrim","NGram","max","ngram","Repeat","repeat","ReplaceStr","replacestr","ReplaceStrRegex","first","replacestrregex","RTrim","rtrim","Space","num","space","SubString","substring","TitleCase","titlecase","Trim","trim","UpperCase","uppercase","Format","format","Time","time","Epoch","unit","epoch","TimeAdd","base","offset","time_add","TimeSubtract","time_subtract","TimeDiff","finish","time_diff","other","Date","date","Now","now","NextId","next_id","NewId","new_id","Database","scope","database","Index","Class","class","Collection","FunctionFn","function","Role","role","AccessProviders","access_providers","Classes","classes","Collections","collections","Databases","databases","Indexes","indexes","Functions","functions","Roles","roles","Keys","Tokens","tokens","Credentials","credentials","Equals","equals","Contains","path","_in","contains","ContainsValue","contains_value","ContainsField","field","obj","contains_field","ContainsPath","contains_path","Select","_default","exprObj","select","undefined","default","SelectAll","select_all","Abs","abs","Add","add","BitAnd","bitand","BitNot","bitnot","BitOr","bitor","BitXor","bitxor","Ceil","ceil","Divide","divide","Floor","floor","Max","Min","Modulo","modulo","Multiply","multiply","Round","precision","round","Subtract","subtract","Sign","sign","Sqrt","sqrt","Trunc","trunc","Count","count","Sum","sum","Mean","mean","Any","any","All","all","Acos","acos","Asin","asin","Atan","atan","Cos","cos","Cosh","cosh","Degrees","degrees","Exp","exp","Hypot","side","hypot","Ln","ln","Log","log","Pow","exponent","pow","Radians","radians","Sin","sin","Sinh","sinh","Tan","tan","Tanh","tanh","LT","lt","LTE","lte","GT","gt","GTE","gte","And","and","Or","or","Not","boolean","not","ToString","to_string","ToNumber","to_number","ToObject","to_object","ToArray","to_array","ToDouble","to_double","ToInteger","to_integer","ToTime","to_time","ToSeconds","to_seconds","ToMillis","to_millis","ToMicros","to_micros","DayOfWeek","day_of_week","DayOfYear","day_of_year","DayOfMonth","day_of_month","Hour","hour","Minute","minute","Second","second","Month","month","Year","year","ToDate","to_date","MoveDatabase","move_database","Documents","documents","Reverse","reverse","AccessProvider","access_provider","callerFunc","InvalidArity","n","mainParams","optionalParams","key","val","valuesAsArr","prototype","slice","rv","toString","str","symbol","elem","Uint8Array","ArrayBuffer","module","exports","Function"],"mappings":"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","sourcesContent":["'use strict'\n\nvar annotate = require('fn-annotate')\nvar deprecate = require('util-deprecate')\nvar Expr = require('./Expr')\nvar errors = require('./errors')\nvar values = require('./values')\nvar objectAssign = require('object-assign')\nvar util = require('./_util')\n\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `collections/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.COLLECTIONS))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a collection ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given collection.\n * @return {Expr}\n */\nfunction Ref() {\n  arity.between(1, 2, arguments, Ref.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ '@ref': wrap(arguments[0]) })\n    case 2:\n      return new Expr({ ref: wrap(arguments[0]), id: wrap(arguments[1]) })\n  }\n}\n\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\nfunction Bytes(bytes) {\n  arity.exact(1, arguments, Bytes.name)\n  return new values.Bytes(bytes)\n}\n\n// Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\nfunction Abort(msg) {\n  arity.exact(1, arguments, Abort.name)\n  return new Expr({ abort: wrap(msg) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments, At.name)\n  return new Expr({ at: wrap(timestamp), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\nfunction Let(vars, expr) {\n  arity.exact(2, arguments, Let.name)\n  var bindings = []\n\n  if (Array.isArray(vars)) {\n    bindings = vars.map(function(item) {\n      return wrapValues(item)\n    })\n  } else {\n    bindings = Object.keys(vars).map(function(k) {\n      var b = {}\n      b[k] = wrap(vars[k])\n      return b\n    })\n  }\n\n  if (typeof expr === 'function') {\n    if (Array.isArray(vars)) {\n      var expr_vars = []\n\n      vars.forEach(function(item) {\n        Object.keys(item).forEach(function(name) {\n          expr_vars.push(Var(name))\n        })\n      })\n\n      expr = expr.apply(null, expr_vars)\n    } else {\n      expr = expr.apply(\n        null,\n        Object.keys(vars).map(function(name) {\n          return Var(name)\n        })\n      )\n    }\n  }\n\n  return new Expr({ let: bindings, in: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\nfunction Var(varName) {\n  arity.exact(1, arguments, Var.name)\n  return new Expr({ var: wrap(varName) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments, If.name)\n  return new Expr({ if: wrap(condition), then: wrap(then), else: wrap(_else) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\nfunction Do() {\n  arity.min(1, arguments, Do.name)\n  var args = argsToArray(arguments)\n  return new Expr({ do: wrap(args) })\n}\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\nvar objectFunction = function(fields) {\n  arity.exact(1, arguments, objectFunction.name)\n  return new Expr({ object: wrapValues(fields) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n * documentation.\n *\n * @param {module:query~ExprArg} var\n *   The names of the variables to be bound in this lambda expression.\n * @param {module:query~ExprArg} expr\n *   The lambda expression.\n * @return {Expr}\n */\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */ function Lambda() {\n  arity.between(1, 2, arguments, Lambda.name)\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0]\n      if (typeof value === 'function') {\n        return _lambdaFunc(value)\n      } else if (\n        value instanceof Expr ||\n        util.checkInstanceHasProperty(value, '_isFaunaExpr')\n      ) {\n        return value\n      } else {\n        throw new errors.InvalidValue(\n          'Lambda function takes either a Function or an Expr.'\n        )\n      }\n    case 2:\n      var var_name = arguments[0]\n      var expr = arguments[1]\n\n      return _lambdaExpr(var_name, expr)\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaFunc(func) {\n  var vars = annotate(func)\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue(\n        'Provided Function must take at least 1 argument.'\n      )\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])))\n    default:\n      return _lambdaExpr(\n        vars,\n        func.apply(\n          null,\n          vars.map(function(name) {\n            return Var(name)\n          })\n        )\n      )\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({ lambda: wrap(var_name), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\nfunction Call(ref) {\n  arity.min(1, arguments, Call.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ call: wrap(ref), arguments: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\nfunction Query(lambda) {\n  arity.exact(1, arguments, Query.name)\n  return new Expr({ query: wrap(lambda) })\n}\n\n// Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments, Map.name)\n  return new Expr({ map: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments, Foreach.name)\n  return new Expr({ foreach: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments, Filter.name)\n  return new Expr({ filter: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Take(number, collection) {\n  arity.exact(2, arguments, Take.name)\n  return new Expr({ take: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Drop(number, collection) {\n  arity.exact(2, arguments, Drop.name)\n  return new Expr({ drop: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments, Prepend.name)\n  return new Expr({ prepend: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Append(elements, collection) {\n  arity.exact(2, arguments, Append.name)\n  return new Expr({ append: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments, IsEmpty.name)\n  return new Expr({ is_empty: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments, IsNonEmpty.name)\n  return new Expr({ is_nonempty: wrap(collection) })\n}\n\n// Type check functions\n\n/**\n * Check if the expression is a number.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnumber\">IsNumber</a>\n */\nfunction IsNumber(expr) {\n  arity.exact(1, arguments, IsNumber.name)\n  return new Expr({ is_number: wrap(expr) })\n}\n\n/**\n * Check if the expression is a double.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdouble\">IsDouble</a>\n */\nfunction IsDouble(expr) {\n  arity.exact(1, arguments, IsDouble.name)\n  return new Expr({ is_double: wrap(expr) })\n}\n\n/**\n * Check if the expression is an integer.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isinteger\">IsInteger</a>\n */\nfunction IsInteger(expr) {\n  arity.exact(1, arguments, IsInteger.name)\n  return new Expr({ is_integer: wrap(expr) })\n}\n\n/**\n * Check if the expression is a boolean.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isboolean\">IsBoolean</a>\n */\nfunction IsBoolean(expr) {\n  arity.exact(1, arguments, IsBoolean.name)\n  return new Expr({ is_boolean: wrap(expr) })\n}\n\n/**\n * Check if the expression is null.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnull\">IsNull</a>\n */\nfunction IsNull(expr) {\n  arity.exact(1, arguments, IsNull.name)\n  return new Expr({ is_null: wrap(expr) })\n}\n\n/**\n * Check if the expression is a byte array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isbytes\">IsBytes</a>\n */\nfunction IsBytes(expr) {\n  arity.exact(1, arguments, IsBytes.name)\n  return new Expr({ is_bytes: wrap(expr) })\n}\n\n/**\n * Check if the expression is a timestamp.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istimestamp\">IsTimestamp</a>\n */\nfunction IsTimestamp(expr) {\n  arity.exact(1, arguments, IsTimestamp.name)\n  return new Expr({ is_timestamp: wrap(expr) })\n}\n\n/**\n * Check if the expression is a date.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdate\">IsDate</a>\n */\nfunction IsDate(expr) {\n  arity.exact(1, arguments, IsDate.name)\n  return new Expr({ is_date: wrap(expr) })\n}\n\n/**\n * Check if the expression is a string.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isstring\">IsString</a>\n */\nfunction IsString(expr) {\n  arity.exact(1, arguments, IsString.name)\n  return new Expr({ is_string: wrap(expr) })\n}\n\n/**\n * Check if the expression is an array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isarray\">IsArray</a>\n */\nfunction IsArray(expr) {\n  arity.exact(1, arguments, IsArray.name)\n  return new Expr({ is_array: wrap(expr) })\n}\n\n/**\n * Check if the expression is an object.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isobject\">IsObject</a>\n */\nfunction IsObject(expr) {\n  arity.exact(1, arguments, IsObject.name)\n  return new Expr({ is_object: wrap(expr) })\n}\n\n/**\n * Check if the expression is a reference.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isref\">IsRef</a>\n */\nfunction IsRef(expr) {\n  arity.exact(1, arguments, IsRef.name)\n  return new Expr({ is_ref: wrap(expr) })\n}\n\n/**\n * Check if the expression is a set.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isset\">IsSet</a>\n */\nfunction IsSet(expr) {\n  arity.exact(1, arguments, IsSet.name)\n  return new Expr({ is_set: wrap(expr) })\n}\n\n/**\n * Check if the expression is a document (either a reference or an instance).\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdoc\">IsDoc</a>\n */\nfunction IsDoc(expr) {\n  arity.exact(1, arguments, IsDoc.name)\n  return new Expr({ is_doc: wrap(expr) })\n}\n\n/**\n * Check if the expression is a lambda.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/islambda\">IsLambda</a>\n */\nfunction IsLambda(expr) {\n  arity.exact(1, arguments, IsLambda.name)\n  return new Expr({ is_lambda: wrap(expr) })\n}\n\n/**\n * Check if the expression is a collection.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscollection\">IsCollection</a>\n */\nfunction IsCollection(expr) {\n  arity.exact(1, arguments, IsCollection.name)\n  return new Expr({ is_collection: wrap(expr) })\n}\n\n/**\n * Check if the expression is a database.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdatabase\">IsDatabase</a>\n */\nfunction IsDatabase(expr) {\n  arity.exact(1, arguments, IsDatabase.name)\n  return new Expr({ is_database: wrap(expr) })\n}\n\n/**\n * Check if the expression is an index.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isindex\">IsIndex</a>\n */\nfunction IsIndex(expr) {\n  arity.exact(1, arguments, IsIndex.name)\n  return new Expr({ is_index: wrap(expr) })\n}\n\n/**\n * Check if the expression is a function.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isfunction\">IsFunction</a>\n */\nfunction IsFunction(expr) {\n  arity.exact(1, arguments, IsFunction.name)\n  return new Expr({ is_function: wrap(expr) })\n}\n\n/**\n * Check if the expression is a key.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iskey\">IsKey</a>\n */\nfunction IsKey(expr) {\n  arity.exact(1, arguments, IsKey.name)\n  return new Expr({ is_key: wrap(expr) })\n}\n\n/**\n * Check if the expression is a token.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istoken\">IsToken</a>\n */\nfunction IsToken(expr) {\n  arity.exact(1, arguments, IsToken.name)\n  return new Expr({ is_token: wrap(expr) })\n}\n\n/**\n * Check if the expression is credentials.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscredentials\">IsCredentials</a>\n */\nfunction IsCredentials(expr) {\n  arity.exact(1, arguments, IsCredentials.name)\n  return new Expr({ is_credentials: wrap(expr) })\n}\n\n/**\n * Check if the expression is a role.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isrole\">IsRole</a>\n */\nfunction IsRole(expr) {\n  arity.exact(1, arguments, IsRole.name)\n  return new Expr({ is_role: wrap(expr) })\n}\n\n// Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the document.\n * @return {Expr}\n */\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments, Get.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ get: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments, KeyFromSecret.name)\n  return new Expr({ key_from_secret: wrap(secret) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/reduce).\n *\n * @param {module:query~ExprArg} lambda\n *   The accumulator function\n * @param {module:query~ExprArg} initial\n *   The initial value\n * @param {module:query~ExprArg} collection\n *   The colleciton to be reduced\n * @return {Expr}\n */\nfunction Reduce(lambda, initial, collection) {\n  arity.exact(3, arguments, Reduce.name)\n  return new Expr({\n    reduce: wrap(lambda),\n    initial: wrap(initial),\n    collection: wrap(collection),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments, Paginate.name)\n  opts = util.defaults(opts, {})\n\n  return new Expr(objectAssign({ paginate: wrap(set) }, wrapValues(opts)))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the document's existence.\n * @return {Expr}\n */\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments, Exists.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ exists: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n// Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a CollectionRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Create(collection_ref, params) {\n  arity.between(1, 2, arguments, Create.name)\n  return new Expr({ create: wrap(collection_ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Update(ref, params) {\n  arity.exact(2, arguments, Update.name)\n  return new Expr({ update: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Replace(ref, params) {\n  arity.exact(2, arguments, Replace.name)\n  return new Expr({ replace: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\nfunction Delete(ref) {\n  arity.exact(1, arguments, Delete.name)\n  return new Expr({ delete: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the document.\n * @return {Expr}\n */\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments, Insert.name)\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments, Remove.name)\n  return new Expr({ remove: wrap(ref), ts: wrap(ts), action: wrap(action) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n *\n * @deprecated use CreateCollection instead\n */\nfunction CreateClass(params) {\n  arity.exact(1, arguments, CreateClass.name)\n  return new Expr({ create_class: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a collection.\n *     - name (required): the name of the collection to create\n * @return {Expr}\n */\nfunction CreateCollection(params) {\n  arity.exact(1, arguments, CreateCollection.name)\n  return new Expr({ create_collection: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments, CreateDatabase.name)\n  return new Expr({ create_database: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source collections and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\nfunction CreateIndex(params) {\n  arity.exact(1, arguments, CreateIndex.name)\n  return new Expr({ create_index: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to. Optional.\n *     - role: The role of the new key\n * @return {Expr}\n */\nfunction CreateKey(params) {\n  arity.exact(1, arguments, CreateKey.name)\n  return new Expr({ create_key: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\nfunction CreateFunction(params) {\n  arity.exact(1, arguments, CreateFunction.name)\n  return new Expr({ create_function: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new role.\n *     - name: The name of the role\n *     - privileges: An array of privileges\n *     - membership: An array of membership bindings\n * @return {Expr}\n */\nfunction CreateRole(params) {\n  arity.exact(1, arguments, CreateRole.name)\n  return new Expr({ create_role: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new access provider.\n *     - name: A valid schema name\n *     - issuer: A unique string\n *     - jwks_uri: A valid HTTPS URI\n *     - roles: An array of role/predicate pairs where the predicate returns a boolean.\n *                   The array can also contain Role references.\n * @return {Expr}\n */\nfunction CreateAccessProvider(params) {\n  arity.exact(1, arguments, CreateAccessProvider.name)\n  return new Expr({ create_access_provider: wrap(params) })\n}\n\n// Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document for which to retrieve the singleton set.\n * @return {Expr}\n */\nfunction Singleton(ref) {\n  arity.exact(1, arguments, Singleton.name)\n  return new Expr({ singleton: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\nfunction Events(ref_set) {\n  arity.exact(1, arguments, Events.name)\n  return new Expr({ events: wrap(ref_set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\nfunction Match(index) {\n  arity.min(1, arguments, Match.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ match: wrap(index), terms: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\nfunction Union() {\n  arity.min(1, arguments, Union.name)\n  return new Expr({ union: wrap(varargs(arguments)) })\n}\n\n/**\n * Merge two or more objects..\n *\n * @param {...module:query~ExprArg} merge merge the first object.\n * @param {...module:query~ExprArg} _with the second object or a list of objects\n * @param {...module:query~ExprArg} lambda a lambda to resolve possible conflicts\n * @return {Expr}\n * */\nfunction Merge(merge, _with, lambda) {\n  arity.between(2, 3, arguments, Merge.name)\n  return new Expr(\n    params({ merge: wrap(merge), with: wrap(_with) }, { lambda: wrap(lambda) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\nfunction Intersection() {\n  arity.min(1, arguments, Intersection.name)\n  return new Expr({ intersection: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\nfunction Difference() {\n  arity.min(1, arguments, Difference.name)\n  return new Expr({ difference: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\nfunction Distinct(set) {\n  arity.exact(1, arguments, Distinct.name)\n  return new Expr({ distinct: wrap(set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\nfunction Join(source, target) {\n  arity.exact(2, arguments, Join.name)\n  return new Expr({ join: wrap(source), with: wrap(target) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/range).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef of the source set\n * @param {module:query~ExprArg} from\n *   The lower bound\n * @param {module:query~ExprArg} to\n *   The upper bound\n * @return {Expr}\n */\nfunction Range(set, from, to) {\n  arity.exact(3, arguments, Range.name)\n  return new Expr({ range: wrap(set), from: wrap(from), to: wrap(to) })\n}\n\n// Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\nfunction Login(ref, params) {\n  arity.exact(2, arguments, Login.name)\n  return new Expr({ login: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments, Logout.name)\n  return new Expr({ logout: wrap(delete_tokens) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\nfunction Identify(ref, password) {\n  arity.exact(2, arguments, Identify.name)\n  return new Expr({ identify: wrap(ref), password: wrap(password) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction Identity() {\n  arity.exact(0, arguments, Identity.name)\n  return new Expr({ identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentIdentity() {\n  arity.exact(0, arguments, CurrentIdentity.name)\n  return new Expr({ current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasIdentity() {\n  arity.exact(0, arguments, HasIdentity.name)\n  return new Expr({ has_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\nfunction HasCurrentIdentity() {\n  arity.exact(0, arguments, HasCurrentIdentity.name)\n  return new Expr({ has_current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentToken() {\n  arity.exact(0, arguments, CurrentToken.name)\n  return new Expr({ current_token: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasCurrentToken() {\n  arity.exact(0, arguments, HasCurrentToken.name)\n  return new Expr({ has_current_token: null })\n}\n\n// String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} strings - A list of strings to concatenate.\n * @param {string} separator  - The separator to use between each string.\n * @return {string} a single combined string\n */\nfunction Concat(strings, separator) {\n  arity.min(1, arguments, Concat.name)\n  separator = util.defaults(separator, null)\n  return new Expr(\n    params({ concat: wrap(strings) }, { separator: wrap(separator) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} string - The string to casefold.\n * @param {string} normalizer - The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {string} a normalized string\n */\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments, Casefold.name)\n  return new Expr(\n    params({ casefold: wrap(string) }, { normalizer: wrap(normalizer) })\n  )\n}\n\n/**\n * Returns true if the string contains the given substring, or false if otherwise\n *\n * @param {string} value  - the string to evaluate\n * @param {string} search - the substring to search for\n * @return {boolean}      - was the search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstr\">FaunaDB ContainsStr Function</a>\n */\nfunction ContainsStr(value, search) {\n  arity.exact(2, arguments, ContainsStr.name)\n  return new Expr({ containsstr: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string contains the given pattern, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} pattern - the pattern to search for\n * @return {boolean}       - was the regex search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstrregex\">FaunaDB ContainsStrRegex Function</a>\n */\nfunction ContainsStrRegex(value, pattern) {\n  arity.exact(2, arguments, ContainsStrRegex.name)\n  return new Expr({ containsstrregex: wrap(value), pattern: wrap(pattern) })\n}\n\n/**\n * Returns true if the string starts with the given prefix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the prefix to search for\n * @return {boolean}       - does `value` start with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/startswith\">FaunaDB StartsWith Function</a>\n */\nfunction StartsWith(value, search) {\n  arity.exact(2, arguments, StartsWith.name)\n  return new Expr({ startswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string ends with the given suffix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the suffix to search for\n * @return {boolean}       - does `value` end with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/endswith\">FaunaDB EndsWith Function</a>\n */\nfunction EndsWith(value, search) {\n  arity.exact(2, arguments, EndsWith.name)\n  return new Expr({ endswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * It takes a string and returns a regex which matches the input string verbatim.\n *\n * @param value      - the string to analyze\n * @return {string}  - a regex which matches the input string verbatim\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/regexescape\">FaunaDB RegexEscape Function</a>\n */\nfunction RegexEscape(value) {\n  arity.exact(1, arguments, RegexEscape.name)\n  return new Expr({ regexescape: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - Find the first position of this string in the search string\n * @param {int} start - An optional start offset into the search string\n * @return {int} location of the found string or -1 if not found\n */\nfunction FindStr(value, find, start) {\n  arity.between(2, 3, arguments, FindStr.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params({ findstr: wrap(value), find: wrap(find) }, { start: wrap(start) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - Find the first position of this pattern in the search string using a java regular expression syntax\n * @param {int} start - An optional start offset into the search string\n * @param {int} numResults - An optional number of results to return, max 1024\n * @return {Array} an array of object describing where the search pattern was located\n */\nfunction FindStrRegex(value, pattern, start, numResults) {\n  arity.between(2, 4, arguments, FindStrRegex.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params(\n      { findstrregex: wrap(value), pattern: wrap(pattern) },\n      { start: wrap(start), num_results: wrap(numResults) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to calculate the length in codepoints.\n * @return {int} the length of the string in codepoints\n */\nfunction Length(value) {\n  arity.exact(1, arguments, Length.name)\n  return new Expr({ length: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to LowerCase.\n * @return {string} the string converted to lowercase\n */\nfunction LowerCase(value) {\n  arity.exact(1, arguments, LowerCase.name)\n  return new Expr({ lowercase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to trim leading white space.\n * @return {string} the string with leading white space removed\n */\nfunction LTrim(value) {\n  arity.exact(1, arguments, LTrim.name)\n  return new Expr({ ltrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Array|Value}\n */\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments, NGram.name)\n  min = util.defaults(min, null)\n  max = util.defaults(max, null)\n\n  return new Expr(\n    params({ ngram: wrap(terms) }, { min: wrap(min), max: wrap(max) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to repeat.\n * @param {int} number - The number of times to repeat the string\n * @return {string} a string which was repeated\n */\nfunction Repeat(value, number) {\n  arity.between(1, 2, arguments, Repeat.name)\n  number = util.defaults(number, null)\n  return new Expr(params({ repeat: wrap(value) }, { number: wrap(number) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - The string to find in the search string\n * @param {string} replace - The string to replace in the search string\n * @return {String} all the occurrences of find substituted with replace string\n */\nfunction ReplaceStr(value, find, replace) {\n  arity.exact(3, arguments, ReplaceStr.name)\n  return new Expr({\n    replacestr: wrap(value),\n    find: wrap(find),\n    replace: wrap(replace),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - The pattern to find in the search string using a java regular expression syntax\n * @param {string} replace - The string to replace in the search string\n * @param {boolean} first - Replace all or just the first\n * @return {string} all the occurrences of find pattern substituted with replace string\n */\nfunction ReplaceStrRegex(value, pattern, replace, first) {\n  arity.between(3, 4, arguments, ReplaceStrRegex.name)\n  first = util.defaults(first, null)\n  return new Expr(\n    params(\n      {\n        replacestrregex: wrap(value),\n        pattern: wrap(pattern),\n        replace: wrap(replace),\n      },\n      { first: wrap(first) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to remove white space from the end.\n * @return {string} the string with trailing whitespaces removed\n */\nfunction RTrim(value) {\n  arity.exact(1, arguments, RTrim.name)\n  return new Expr({ rtrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {int} num - The string of N Space(s).\n * @return {string} a string with spaces\n */\nfunction Space(num) {\n  arity.exact(1, arguments, Space.name)\n  return new Expr({ space: wrap(num) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value  The string to SubString.\n * @param {int} start  The position the first character of the return string begins at\n * @param {int} length  An optional length, if omitted then returns to the end of string\n * @return {string}\n */\nfunction SubString(value, start, length) {\n  arity.between(1, 3, arguments, SubString.name)\n  start = util.defaults(start, null)\n  length = util.defaults(length, null)\n  return new Expr(\n    params(\n      { substring: wrap(value) },\n      { start: wrap(start), length: wrap(length) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to TitleCase.\n * @return {string}  A string converted to titlecase\n */\nfunction TitleCase(value) {\n  arity.exact(1, arguments, TitleCase.name)\n  return new Expr({ titlecase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Trim.\n * @return {string} a string with leading and trailing whitespace removed\n */\nfunction Trim(value) {\n  arity.exact(1, arguments, Trim.name)\n  return new Expr({ trim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Uppercase.\n * @return {string} An uppercase string\n */\nfunction UpperCase(value) {\n  arity.exact(1, arguments, UpperCase.name)\n  return new Expr({ uppercase: wrap(value) })\n}\n\n/**\n * Format values into a string.\n *\n * @param  {string}  string string with format specifiers\n * @param  {array}   values list of values to format\n * @return {string}         a string\n */\nfunction Format(string) {\n  arity.min(1, arguments, Format.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ format: wrap(string), values: wrap(varargs(args)) })\n}\n\n// Time and date functions\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to converted to a time object.\n * @return {Expr}\n */\nfunction Time(string) {\n  arity.exact(1, arguments, Time.name)\n  return new Expr({ time: wrap(string) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments, Epoch.name)\n  return new Expr({ epoch: wrap(number), unit: wrap(unit) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timeadd).\n *\n * Returns a new time or date with the offset in terms of the unit\n * added.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeAdd(base, offset, unit) {\n  arity.exact(3, arguments, TimeAdd.name)\n  return new Expr({\n    time_add: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract).\n *\n * Returns a new time or date with the offset in terms of the unit\n * subtracted.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeSubtract(base, offset, unit) {\n  arity.exact(3, arguments, TimeSubtract.name)\n  return new Expr({\n    time_subtract: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timediff).\n *\n * Returns the number of intervals in terms of the unit between\n * two times or dates. Both start and finish must be of the same\n * type.\n *\n * @param start the starting time or date, inclusive\n * @param finish the ending time or date, exclusive\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeDiff(start, finish, unit) {\n  arity.exact(3, arguments, TimeDiff.name)\n  return new Expr({\n    time_diff: wrap(start),\n    other: wrap(finish),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\nfunction Date(string) {\n  arity.exact(1, arguments, Date.name)\n  return new Expr({ date: wrap(string) })\n}\n\n/**\n * Returns the current snapshot time.\n *\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/now\">Now function</a>\n */\nfunction Now() {\n  arity.exact(0, arguments, Now.name)\n  return new Expr({ now: wrap(null) })\n}\n\n// Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\nfunction NextId() {\n  arity.exact(0, arguments, NextId.name)\n  return new Expr({ next_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\nfunction NewId() {\n  arity.exact(0, arguments, NewId.name)\n  return new Expr({ new_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments, Database.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ database: wrap(name) })\n    case 2:\n      return new Expr({ database: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments, Index.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ index: wrap(name) })\n    case 2:\n      return new Expr({ index: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n *\n * @deprecated Class is deprecated, use Collection instead\n */\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments, Class.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ class: wrap(name) })\n    case 2:\n      return new Expr({ class: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the collection.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection's scope.\n * @return {Expr}\n */\nfunction Collection(name, scope) {\n  arity.between(1, 2, arguments, Collection.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ collection: wrap(name) })\n    case 2:\n      return new Expr({ collection: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments, FunctionFn.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ function: wrap(name) })\n    case 2:\n      return new Expr({ function: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the role.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role's scope.\n * @return {Expr}\n */\nfunction Role(name, scope) {\n  arity.between(1, 2, arguments, Role.name)\n  scope = util.defaults(scope, null)\n  return new Expr(params({ role: wrap(name) }, { scope: wrap(scope) }))\n}\n\n/**\n *\n * @param {module:query~ExprArg} scope\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction AccessProviders(scope) {\n  arity.max(1, arguments, AccessProviders.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ access_providers: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\nfunction Classes(scope) {\n  arity.max(1, arguments, Classes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ classes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `collections` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection set's scope.\n * @return {Expr}\n */\nfunction Collections(scope) {\n  arity.max(1, arguments, Collections.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ collections: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction Databases(scope) {\n  arity.max(1, arguments, Databases.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ databases: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\nfunction Indexes(scope) {\n  arity.max(1, arguments, Indexes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ indexes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\nfunction Functions(scope) {\n  arity.max(1, arguments, Functions.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ functions: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `roles` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role set's scope.\n * @return {Expr}\n */\nfunction Roles(scope) {\n  arity.max(1, arguments, Roles.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ roles: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\nfunction Keys(scope) {\n  arity.max(1, arguments, Keys.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ keys: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\nfunction Tokens(scope) {\n  arity.max(1, arguments, Tokens.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ tokens: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\nfunction Credentials(scope) {\n  arity.max(1, arguments, Credentials.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ credentials: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\nfunction Equals() {\n  arity.min(1, arguments, Equals.name)\n  return new Expr({ equals: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n *\n * @deprecated use ContainsPath instead\n */\nfunction Contains(path, _in) {\n  arity.exact(2, arguments, Contains.name)\n  return new Expr({ contains: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} value\n *   Represent the value we want to search for.\n * @param {module:query~ExprArg} in\n *   An object we will search for the value passed in.\n * @return {Expr}\n */\nfunction ContainsValue(value, _in) {\n  arity.exact(2, arguments, ContainsValue.name)\n  return new Expr({ contains_value: wrap(value), in: wrap(_in) })\n}\n\n/**\n * @param {string} field\n *   A field name we want to confirm exists.\n * @param {module:query~ExprArg} obj\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsField(field, obj) {\n  arity.exact(2, arguments, ContainsField.name)\n  return new Expr({ contains_field: wrap(field), in: wrap(obj) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsPath(path, _in) {\n  arity.exact(2, arguments, ContainsPath.name)\n  return new Expr({ contains_path: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments, Select.name)\n  var exprObj = { select: wrap(path), from: wrap(from) }\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default)\n  }\n  return new Expr(exprObj)\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n *\n * @deprecated avoid using\n */\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments, SelectAll.name)\n  return new Expr({ select_all: wrap(path), from: wrap(from) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the absolute value.\n * @return {Expr}\n */\nfunction Abs(expr) {\n  arity.exact(1, arguments, Abs.name)\n  return new Expr({ abs: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\nfunction Add() {\n  arity.min(1, arguments, Add.name)\n  return new Expr({ add: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise and together.\n * @return {Expr}\n */\nfunction BitAnd() {\n  arity.min(1, arguments, BitAnd.name)\n  return new Expr({ bitand: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the bitwise not.\n * @return {Expr}\n */\nfunction BitNot(expr) {\n  arity.exact(1, arguments, BitNot.name)\n  return new Expr({ bitnot: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Or'd together.\n * @return {Expr}\n */\nfunction BitOr() {\n  arity.min(1, arguments, BitOr.name)\n  return new Expr({ bitor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Xor'd together.\n * @return {Expr}\n */\nfunction BitXor() {\n  arity.min(1, arguments, BitXor.name)\n  return new Expr({ bitxor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The least integer that is greater than or equal to the number\n * @return {Expr}\n */\nfunction Ceil(expr) {\n  arity.exact(1, arguments, Ceil.name)\n  return new Expr({ ceil: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\nfunction Divide() {\n  arity.min(1, arguments, Divide.name)\n  return new Expr({ divide: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The greatest integer that is less than or equal to the number\n * @return {Expr}\n */\nfunction Floor(expr) {\n  arity.exact(1, arguments, Floor.name)\n  return new Expr({ floor: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Max() {\n  arity.min(1, arguments, Max.name)\n  return new Expr({ max: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Min() {\n  arity.min(1, arguments, Min.name)\n  return new Expr({ min: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\nfunction Modulo() {\n  arity.min(1, arguments, Modulo.name)\n  return new Expr({ modulo: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Multiply() {\n  arity.min(1, arguments, Multiply.name)\n  return new Expr({ multiply: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to round.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Round(value, precision) {\n  arity.min(1, arguments, Round.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ round: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\nfunction Subtract() {\n  arity.min(1, arguments, Subtract.name)\n  return new Expr({ subtract: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sign of the number is returned as positive 1, zero 0 , negative -1\n * @return {Expr}\n */\nfunction Sign(expr) {\n  arity.exact(1, arguments, Sign.name)\n  return new Expr({ sign: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The square root of the number\n * @return {Expr}\n */\nfunction Sqrt(expr) {\n  arity.exact(1, arguments, Sqrt.name)\n  return new Expr({ sqrt: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to truncate.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Trunc(value, precision) {\n  arity.min(1, arguments, Trunc.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ trunc: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n *\n * Count the number of elements in the collection.\n *\n * @param {array}    - array of items\n * @return {integer} - number of items in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/count\">Count function</a>\n */\nfunction Count(collection) {\n  arity.exact(1, arguments, Count.name)\n  return new Expr({ count: wrap(collection) })\n}\n\n/**\n *\n * Sum the elements in the collection.\n *\n * @param {array} - collection of numbers\n * @return {integer} - total of all numbers in collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/sum\">Sum function</a>\n */\nfunction Sum(collection) {\n  arity.exact(1, arguments, Sum.name)\n  return new Expr({ sum: wrap(collection) })\n}\n\n/**\n *\n * Returns the mean of all elements in the collection.\n *\n * @param {array} - collection the numbers\n * @return {float} - the mean of all numbers in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/mean\">Mean function</a>\n */\nfunction Mean(collection) {\n  arity.exact(1, arguments, Mean.name)\n  return new Expr({ mean: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if any element of the collection is true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/any\">Any function</a>\n */\nfunction Any(collection) {\n  arity.exact(1, arguments, Any.name)\n  return new Expr({ any: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if all elements of the collection are true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/all\">All function</a>\n */\nfunction All(collection) {\n  arity.exact(1, arguments, All.name)\n  return new Expr({ all: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc cosine of the number\n * @return {Expr}\n */\nfunction Acos(expr) {\n  arity.exact(1, arguments, Acos.name)\n  return new Expr({ acos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc sine of the number\n * @return {Expr}\n */\nfunction Asin(expr) {\n  arity.exact(1, arguments, Asin.name)\n  return new Expr({ asin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc tangent of the number\n * @return {Expr}\n */\nfunction Atan(expr) {\n  arity.exact(1, arguments, Atan.name)\n  return new Expr({ atan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The cosine of a number\n * @return {Expr}\n */\nfunction Cos(expr) {\n  arity.exact(1, arguments, Cos.name)\n  return new Expr({ cos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic cosine of the number\n * @return {Expr}\n */\nfunction Cosh(expr) {\n  arity.exact(1, arguments, Cosh.name)\n  return new Expr({ cosh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take radians and convert it to degrees 360 degrees = 2 * pi radians\n * @return {Expr}\n */\nfunction Degrees(expr) {\n  arity.exact(1, arguments, Degrees.name)\n  return new Expr({ degrees: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The e raised to an exponent number\n * @return {Expr}\n */\nfunction Exp(expr) {\n  arity.exact(1, arguments, Exp.name)\n  return new Expr({ exp: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A side of the right triangle\n * @param {...module:query~ExprArg} terms\n *   The second side of a right triange, defaults to the first side\n * @return {Expr}\n */\nfunction Hypot(value, side) {\n  arity.min(1, arguments, Hypot.name)\n  side = util.defaults(side, null)\n  return new Expr(params({ hypot: wrap(value) }, { b: wrap(side) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The natural log of the number\n * @return {Expr}\n */\nfunction Ln(expr) {\n  arity.exact(1, arguments, Ln.name)\n  return new Expr({ ln: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The log base 10 of a number\n * @return {Expr}\n */\nfunction Log(expr) {\n  arity.exact(1, arguments, Log.name)\n  return new Expr({ log: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to raise to the power.\n * @param {...module:query~ExprArg} terms\n *   An optional exponent\n * @return {Expr}\n */\nfunction Pow(value, exponent) {\n  arity.min(1, arguments, Pow.name)\n  exponent = util.defaults(exponent, null)\n  return new Expr(params({ pow: wrap(value) }, { exp: wrap(exponent) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take degrees and convert the number to radians 2 * pi = 360 degrees\n * @return {Expr}\n */\nfunction Radians(expr) {\n  arity.exact(1, arguments, Radians.name)\n  return new Expr({ radians: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sine of a number\n * @return {Expr}\n */\nfunction Sin(expr) {\n  arity.exact(1, arguments, Sin.name)\n  return new Expr({ sin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic sine of a number\n * @return {Expr}\n */\nfunction Sinh(expr) {\n  arity.exact(1, arguments, Sinh.name)\n  return new Expr({ sinh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The Tangent of a number\n * @return {Expr}\n */\nfunction Tan(expr) {\n  arity.exact(1, arguments, Tan.name)\n  return new Expr({ tan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyberbolic tangent of a number\n * @return {Expr}\n */\nfunction Tanh(expr) {\n  arity.exact(1, arguments, Tanh.name)\n  return new Expr({ tanh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LT() {\n  arity.min(1, arguments, LT.name)\n  return new Expr({ lt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LTE() {\n  arity.min(1, arguments, LTE.name)\n  return new Expr({ lte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GT() {\n  arity.min(1, arguments, GT.name)\n  return new Expr({ gt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GTE() {\n  arity.min(1, arguments, GTE.name)\n  return new Expr({ gte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\nfunction And() {\n  arity.min(1, arguments, And.name)\n  return new Expr({ and: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\nfunction Or() {\n  arity.min(1, arguments, Or.name)\n  return new Expr({ or: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\nfunction Not(boolean) {\n  arity.exact(1, arguments, Not.name)\n  return new Expr({ not: wrap(boolean) })\n}\n\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\nfunction ToString(expr) {\n  arity.exact(1, arguments, ToString.name)\n  return new Expr({ to_string: wrap(expr) })\n}\n\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\nfunction ToNumber(expr) {\n  arity.exact(1, arguments, ToNumber.name)\n  return new Expr({ to_number: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Object.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Object.\n * @return {Expr}\n */\nfunction ToObject(expr) {\n  arity.exact(1, arguments, ToObject.name)\n  return new Expr({ to_object: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Array.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Array.\n * @return {Expr}\n */\nfunction ToArray(expr) {\n  arity.exact(1, arguments, ToArray.name)\n  return new Expr({ to_array: wrap(expr) })\n}\n\n/**\n * Converts an expression to a double value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a double.\n * @return {Expr}\n */\nfunction ToDouble(expr) {\n  arity.exact(1, arguments, ToDouble.name)\n  return new Expr({ to_double: wrap(expr) })\n}\n\n/**\n * Converts an expression to an integer value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an integer.\n * @return {Expr}\n */\nfunction ToInteger(expr) {\n  arity.exact(1, arguments, ToInteger.name)\n  return new Expr({ to_integer: wrap(expr) })\n}\n\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\nfunction ToTime(expr) {\n  arity.exact(1, arguments, ToTime.name)\n  return new Expr({ to_time: wrap(expr) })\n}\n\n/**\n * Converts an expression evaluating to a time to seconds since epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to seconds numeric value.\n * @return {Expr}\n */\nfunction ToSeconds(expr) {\n  arity.exact(1, arguments, ToSeconds.name)\n  return new Expr({ to_seconds: wrap(expr) })\n}\n\n/**\n * Converts a time expression to milliseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to millisecond numeric value.\n * @return {Expr}\n */\nfunction ToMillis(expr) {\n  arity.exact(1, arguments, ToMillis.name)\n  return new Expr({ to_millis: wrap(expr) })\n}\n\n/**\n * Converts a time expression to microseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to microsecond numeric value.\n * @return {Expr}\n */\nfunction ToMicros(expr) {\n  arity.exact(1, arguments, ToMicros.name)\n  return new Expr({ to_micros: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the week following ISO-8601 convention, from 1 (Monday) to 7 (Sunday).\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of week.\n * @return {Expr}\n */\nfunction DayOfWeek(expr) {\n  arity.exact(1, arguments, DayOfWeek.name)\n  return new Expr({ day_of_week: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the year, from 1 to 365, or 366 in a leap year.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of year.\n * @return {Expr}\n */\nfunction DayOfYear(expr) {\n  arity.exact(1, arguments, DayOfYear.name)\n  return new Expr({ day_of_year: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the month, from 1 to 31.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of month.\n * @return {Expr}\n */\nfunction DayOfMonth(expr) {\n  arity.exact(1, arguments, DayOfMonth.name)\n  return new Expr({ day_of_month: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a hour.\n * @return {Expr}\n */\nfunction Hour(expr) {\n  arity.exact(1, arguments, Hour.name)\n  return new Expr({ hour: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Minute(expr) {\n  arity.exact(1, arguments, Minute.name)\n  return new Expr({ minute: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Second(expr) {\n  arity.exact(1, arguments, Second.name)\n  return new Expr({ second: wrap(expr) })\n}\n\n/**\n * Returns a time expression's month of the year, from 1 to 12.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Month(expr) {\n  arity.exact(1, arguments, Month.name)\n  return new Expr({ month: wrap(expr) })\n}\n\n/**\n * Returns the time expression's year, following the ISO-8601 standard.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a year.\n * @return {Expr}\n */\nfunction Year(expr) {\n  arity.exact(1, arguments, Year.name)\n  return new Expr({ year: wrap(expr) })\n}\n\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\nfunction ToDate(expr) {\n  arity.exact(1, arguments, ToDate.name)\n  return new Expr({ to_date: wrap(expr) })\n}\n\n/**\n * Move database to a new hierarchy.\n *\n * @param {string}  from database reference to be moved.\n * @param {string}  to new parent database reference.\n * @return {Expr}   The expression wrapping the provided object.\n * @see <a href=\"https://app.fauna.com/documentation/reference/queryapi#write-functions\">FaunaDB Write Functions</a>\n */\nfunction MoveDatabase(from, to) {\n  arity.exact(2, arguments, MoveDatabase.name)\n  return new Expr({ move_database: wrap(from), to: wrap(to) })\n}\n\n/**\n * Returns a set of all documents in the given collection.\n * A set must be paginated in order to retrieve its values.\n *\n * @param collection a reference to the collection. Type: Ref\n * @return a new {@link Expr} instance\n * @see #Paginate(Expr)\n */\nfunction Documents(collection) {\n  arity.exact(1, arguments, Documents.name)\n  return new Expr({ documents: wrap(collection) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} expr\n *  An expression (i.e. Set, Page, or Array) to reverse\n * @return {Expr}\n */\nfunction Reverse(expr) {\n  arity.exact(1, arguments, Reverse.name)\n  return new Expr({ reverse: wrap(expr) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} name\n * A string representing an AccessProvider's name\n * @return {Expr}\n */\nfunction AccessProvider(name) {\n  arity.exact(1, arguments, AccessProvider.name)\n  return new Expr({ access_provider: wrap(name) })\n}\n\n// Helpers\n\n/**\n * @ignore\n */\nfunction arity(min, max, args, callerFunc) {\n  if (\n    (min !== null && args.length < min) ||\n    (max !== null && args.length > max)\n  ) {\n    throw new errors.InvalidArity(min, max, args.length, callerFunc)\n  }\n}\n\narity.exact = function(n, args, callerFunc) {\n  arity(n, n, args, callerFunc)\n}\narity.max = function(n, args, callerFunc) {\n  arity(null, n, args, callerFunc)\n}\narity.min = function(n, args, callerFunc) {\n  arity(n, null, args, callerFunc)\n}\narity.between = function(min, max, args, callerFunc) {\n  arity(min, max, args, callerFunc)\n}\n\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key]\n    if (val !== null && val !== undefined) {\n      mainParams[key] = val\n    }\n  }\n  return mainParams\n}\n\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values)\n    ? values\n    : Array.prototype.slice.call(values)\n  return values.length === 1 ? values[0] : valuesAsArr\n}\n\n/**\n * @ignore\n */\nfunction argsToArray(args) {\n  var rv = []\n  rv.push.apply(rv, args)\n  return rv\n}\n\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\nfunction wrap(obj) {\n  arity.exact(1, arguments, wrap.name)\n  if (obj === null) {\n    return null\n  } else if (\n    obj instanceof Expr ||\n    util.checkInstanceHasProperty(obj, '_isFaunaExpr')\n  ) {\n    return obj\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function(str, symbol) {\n      return symbol\n    })\n  } else if (typeof obj === 'function') {\n    return Lambda(obj)\n  } else if (Array.isArray(obj)) {\n    return new Expr(\n      obj.map(function(elem) {\n        return wrap(elem)\n      })\n    )\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj)\n  } else if (typeof obj === 'object') {\n    return new Expr({ object: wrapValues(obj) })\n  } else {\n    return obj\n  }\n}\n\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {}\n\n    Object.keys(obj).forEach(function(key) {\n      rv[key] = wrap(obj[key])\n    })\n\n    return rv\n  } else {\n    return null\n  }\n}\n\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  IsNumber: IsNumber,\n  IsDouble: IsDouble,\n  IsInteger: IsInteger,\n  IsBoolean: IsBoolean,\n  IsNull: IsNull,\n  IsBytes: IsBytes,\n  IsTimestamp: IsTimestamp,\n  IsDate: IsDate,\n  IsString: IsString,\n  IsArray: IsArray,\n  IsObject: IsObject,\n  IsRef: IsRef,\n  IsSet: IsSet,\n  IsDoc: IsDoc,\n  IsLambda: IsLambda,\n  IsCollection: IsCollection,\n  IsDatabase: IsDatabase,\n  IsIndex: IsIndex,\n  IsFunction: IsFunction,\n  IsKey: IsKey,\n  IsToken: IsToken,\n  IsCredentials: IsCredentials,\n  IsRole: IsRole,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Reduce: Reduce,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: deprecate(\n    CreateClass,\n    'CreateClass() is deprecated, use CreateCollection() instead'\n  ),\n  CreateCollection: CreateCollection,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  CreateRole: CreateRole,\n  CreateAccessProvider: CreateAccessProvider,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Merge: Merge,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Range: Range,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: deprecate(\n    Identity,\n    'Identity() is deprecated, use CurrentIdentity() instead'\n  ),\n  CurrentIdentity: CurrentIdentity,\n  HasIdentity: deprecate(\n    HasIdentity,\n    'HasIdentity() is deprecated, use HasCurrentIdentity() instead'\n  ),\n  HasCurrentIdentity: HasCurrentIdentity,\n  CurrentToken: CurrentToken,\n  HasCurrentToken: HasCurrentToken,\n  Concat: Concat,\n  Casefold: Casefold,\n  ContainsStr: ContainsStr,\n  ContainsStrRegex: ContainsStrRegex,\n  StartsWith: StartsWith,\n  EndsWith: EndsWith,\n  FindStr: FindStr,\n  FindStrRegex: FindStrRegex,\n  Length: Length,\n  LowerCase: LowerCase,\n  LTrim: LTrim,\n  NGram: NGram,\n  Repeat: Repeat,\n  ReplaceStr: ReplaceStr,\n  ReplaceStrRegex: ReplaceStrRegex,\n  RegexEscape: RegexEscape,\n  RTrim: RTrim,\n  Space: Space,\n  SubString: SubString,\n  TitleCase: TitleCase,\n  Trim: Trim,\n  UpperCase: UpperCase,\n  Format: Format,\n  Time: Time,\n  TimeAdd: TimeAdd,\n  TimeSubtract: TimeSubtract,\n  TimeDiff: TimeDiff,\n  Epoch: Epoch,\n  Date: Date,\n  Now: Now,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: deprecate(Class, 'Class() is deprecated, use Collection() instead'),\n  Collection: Collection,\n  Function: FunctionFn,\n  Role: Role,\n  AccessProviders: AccessProviders,\n  Classes: deprecate(\n    Classes,\n    'Classes() is deprecated, use Collections() instead'\n  ),\n  Collections: Collections,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Roles: Roles,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: deprecate(\n    Contains,\n    'Contains() is deprecated, use ContainsPath() instead'\n  ),\n  ContainsPath: ContainsPath,\n  ContainsField: ContainsField,\n  ContainsValue: ContainsValue,\n  Select: Select,\n  SelectAll: deprecate(SelectAll, 'SelectAll() is deprecated. Avoid use.'),\n  Abs: Abs,\n  Add: Add,\n  BitAnd: BitAnd,\n  BitNot: BitNot,\n  BitOr: BitOr,\n  BitXor: BitXor,\n  Ceil: Ceil,\n  Divide: Divide,\n  Floor: Floor,\n  Max: Max,\n  Min: Min,\n  Modulo: Modulo,\n  Multiply: Multiply,\n  Round: Round,\n  Subtract: Subtract,\n  Sign: Sign,\n  Sqrt: Sqrt,\n  Trunc: Trunc,\n  Count: Count,\n  Sum: Sum,\n  Mean: Mean,\n  Any: Any,\n  All: All,\n  Acos: Acos,\n  Asin: Asin,\n  Atan: Atan,\n  Cos: Cos,\n  Cosh: Cosh,\n  Degrees: Degrees,\n  Exp: Exp,\n  Hypot: Hypot,\n  Ln: Ln,\n  Log: Log,\n  Pow: Pow,\n  Radians: Radians,\n  Sin: Sin,\n  Sinh: Sinh,\n  Tan: Tan,\n  Tanh: Tanh,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToObject: ToObject,\n  ToArray: ToArray,\n  ToDouble: ToDouble,\n  ToInteger: ToInteger,\n  ToTime: ToTime,\n  ToSeconds: ToSeconds,\n  ToMicros: ToMicros,\n  ToMillis: ToMillis,\n  DayOfMonth: DayOfMonth,\n  DayOfWeek: DayOfWeek,\n  DayOfYear: DayOfYear,\n  Second: Second,\n  Minute: Minute,\n  Hour: Hour,\n  Month: Month,\n  Year: Year,\n  ToDate: ToDate,\n  MoveDatabase: MoveDatabase,\n  Documents: Documents,\n  Reverse: Reverse,\n  AccessProvider: AccessProvider,\n  wrap: wrap,\n}\n"]},"metadata":{},"sourceType":"script"}