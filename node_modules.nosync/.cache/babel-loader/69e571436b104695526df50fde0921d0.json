{"ast":null,"code":"const stringify = require('.');\n\nconst {\n  StringDecoder\n} = require('string_decoder');\n\nmodule.exports = function (records, options = {}) {\n  const data = [];\n\n  if (Buffer.isBuffer(records)) {\n    const decoder = new StringDecoder();\n    records = decoder.write(records);\n  }\n\n  function onData(record) {\n    if (record) {\n      data.push(record.toString());\n    }\n  }\n\n  let stringifier = new stringify.Stringifier(options);\n  stringifier.on('data', onData);\n\n  for (let record of records) {\n    stringifier.write(record);\n  }\n\n  stringifier.end();\n  stringifier.off('data', onData);\n  return data.join('');\n};","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/csv-stringify/lib/sync.js"],"names":["stringify","require","StringDecoder","module","exports","records","options","data","Buffer","isBuffer","decoder","write","onData","record","push","toString","stringifier","Stringifier","on","end","off","join"],"mappings":"AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,GAAD,CAAzB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAkBD,OAAO,CAAC,gBAAD,CAA/B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,OAAO,GAAC,EAA1B,EAA6B;AAC5C,QAAMC,IAAI,GAAG,EAAb;;AACA,MAAGC,MAAM,CAACC,QAAP,CAAgBJ,OAAhB,CAAH,EAA4B;AAC1B,UAAMK,OAAO,GAAG,IAAIR,aAAJ,EAAhB;AACAG,IAAAA,OAAO,GAAGK,OAAO,CAACC,KAAR,CAAcN,OAAd,CAAV;AACD;;AACD,WAASO,MAAT,CAAgBC,MAAhB,EAAuB;AACrB,QAAGA,MAAH,EAAU;AACRN,MAAAA,IAAI,CAACO,IAAL,CAAUD,MAAM,CAACE,QAAP,EAAV;AACD;AACF;;AACD,MAAIC,WAAW,GAAG,IAAIhB,SAAS,CAACiB,WAAd,CAA0BX,OAA1B,CAAlB;AACAU,EAAAA,WAAW,CAACE,EAAZ,CAAe,MAAf,EAAuBN,MAAvB;;AACA,OAAI,IAAIC,MAAR,IAAkBR,OAAlB,EAA0B;AACxBW,IAAAA,WAAW,CAACL,KAAZ,CAAkBE,MAAlB;AACD;;AACDG,EAAAA,WAAW,CAACG,GAAZ;AACAH,EAAAA,WAAW,CAACI,GAAZ,CAAgB,MAAhB,EAAwBR,MAAxB;AACA,SAAOL,IAAI,CAACc,IAAL,CAAU,EAAV,CAAP;AACD,CAnBD","sourcesContent":["\nconst stringify = require('.')\nconst {StringDecoder} = require('string_decoder')\n\nmodule.exports = function(records, options={}){\n  const data = []\n  if(Buffer.isBuffer(records)){\n    const decoder = new StringDecoder()\n    records = decoder.write(records)\n  }\n  function onData(record){\n    if(record){\n      data.push(record.toString())\n    }\n  }\n  let stringifier = new stringify.Stringifier(options)\n  stringifier.on('data', onData);\n  for(let record of records){\n    stringifier.write(record) \n  }\n  stringifier.end()\n  stringifier.off('data', onData);\n  return data.join('')\n}\n"]},"metadata":{},"sourceType":"script"}