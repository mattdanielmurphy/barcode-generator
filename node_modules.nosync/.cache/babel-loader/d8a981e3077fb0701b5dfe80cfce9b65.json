{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst GitPath = {\n  parse: path => {\n    if (typeof path == 'object') return path;\n\n    if (GitPath.isUrl(path)) {\n      return GitPath._parseUrl(path);\n    }\n\n    return GitPath._parsePath(path);\n  },\n  _parsePath: path => {\n    //@see: https://regex101.com/r/DwLNHW/11\n    const regex = /^(?:(?:(?:(?:@)([\\w]+)\\/)?(?:([\\w-]+)?\\/)([\\w-\\.]+)(?:(?:#)([\\w-]+))?)|(?:\\.))\\/?([\\w-\\/.]*(?:\\.([\\w]{2,4}))|[\\w\\/]*)?(?:\\/)?([\\w]+)?/mg;\n    return GitPath._execRegex(regex, path);\n  },\n  _parseUrl: url => {\n    //@see https://regex101.com/r/S9zzb9/5\n    const regex = /https?:\\/\\/[\\w\\.]*(github|gitlab)[\\w]*.com\\/([\\w-]+)\\/([\\w-\\.]+)\\/(?:(?:-\\/)?(?:blob\\/|raw\\/)?([\\w]+)\\/)([\\w\\/\\-\\.]+\\.([\\w]+))/gm;\n    return GitPath._execRegex(regex, url);\n  },\n  _execRegex: (regex, str) => {\n    let m,\n        groups = {},\n        map = ['valid', 'ns', 'owner', 'repo', 'branch', 'path', 'type', 'resource'];\n\n    while ((m = regex.exec(str)) !== null) {\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      m.forEach((match, groupIndex) => {\n        groups[map[groupIndex]] = match;\n      });\n    }\n\n    groups.valid = GitPath.isValid(groups);\n    return groups;\n  },\n  fromUrl: url => {\n    let data = GitPath._parseUrl(url);\n\n    if (!GitPath.isValid(data)) return null;\n    data.branch = data.branch && data.branch != 'master' ? ':' + data.branch : '';\n    return \"@\".concat(data.ns, \"/\").concat(data.owner, \"/\").concat(data.repo).concat(data.branch, \"/\").concat(data.path);\n  },\n  toUrl: (path, raw = false) => {\n    let data = typeof path == 'object' ? path : GitPath.parse(path);\n    if (!GitPath.isValid(data)) return null;\n    data.branch = data.branch || 'master';\n\n    if (!data.ns || data.ns == 'github') {\n      data.server = raw ? 'raw.githubusercontent.com' : 'github.com';\n      data.format = raw ? '' : 'blob/';\n      return \"https://\".concat(data.server, \"/\").concat(data.owner, \"/\").concat(data.repo, \"/\").concat(data.format + data.branch, \"/\").concat(data.path);\n    }\n\n    data.server = data.server || 'gitlab.com';\n    data.format = raw ? 'raw' : 'blob';\n    return \"https://\".concat(data.server, \"/\").concat(data.owner, \"/\").concat(data.repo, \"/-/\").concat(data.format, \"/\").concat(data.branch, \"/\").concat(data.path);\n  },\n  toApi: path => {\n    let data = typeof path == 'object' ? path : GitPath.parse(path);\n    if (!GitPath.isValid(data)) return null;\n\n    if (!data.ns || data.ns == 'github') {\n      data.server = 'api.github.com';\n      return \"https://\".concat(data.server, \"/repos/\").concat(data.owner, \"/\").concat(data.repo, \"/contents/\").concat(data.path);\n    }\n\n    data.server = data.server || 'gitlab.com';\n    data.project = encodeURIComponent(data.owner + '/' + data.repo);\n    data.path = encodeURIComponent(data.path);\n    return \"https://\".concat(data.server, \"/api/v4/projects/\").concat(data.project, \"/repository/files/\").concat(data.path);\n  },\n  isValid: obj => {\n    if (typeof obj.type == 'undefined' || !['csv', 'json', 'yaml'].includes(obj.type.toLowerCase())) return false;\n    let mandatory = ['ns', 'owner', 'repo', 'path'];\n    return mandatory.every(x => x in obj && obj[x]);\n  },\n  isUrl: url => {\n    /*\n    *\t@see https://gist.github.com/dperini/729294\n    *\tMIT Â© Diego Perini\n    */\n    const regex = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n    return regex.test(url);\n  }\n};\nvar _default = GitPath;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/matt/Documents/Programming/Projects/barcode-generator/node_modules/gitrows/lib/gitpath.js"],"names":["Object","defineProperty","exports","value","default","GitPath","parse","path","isUrl","_parseUrl","_parsePath","regex","_execRegex","url","str","m","groups","map","exec","index","lastIndex","forEach","match","groupIndex","valid","isValid","fromUrl","data","branch","concat","ns","owner","repo","toUrl","raw","server","format","toApi","project","encodeURIComponent","obj","type","includes","toLowerCase","mandatory","every","x","test","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst GitPath = {\n  parse: path => {\n    if (typeof path == 'object') return path;\n\n    if (GitPath.isUrl(path)) {\n      return GitPath._parseUrl(path);\n    }\n\n    return GitPath._parsePath(path);\n  },\n  _parsePath: path => {\n    //@see: https://regex101.com/r/DwLNHW/11\n    const regex = /^(?:(?:(?:(?:@)([\\w]+)\\/)?(?:([\\w-]+)?\\/)([\\w-\\.]+)(?:(?:#)([\\w-]+))?)|(?:\\.))\\/?([\\w-\\/.]*(?:\\.([\\w]{2,4}))|[\\w\\/]*)?(?:\\/)?([\\w]+)?/mg;\n    return GitPath._execRegex(regex, path);\n  },\n  _parseUrl: url => {\n    //@see https://regex101.com/r/S9zzb9/5\n    const regex = /https?:\\/\\/[\\w\\.]*(github|gitlab)[\\w]*.com\\/([\\w-]+)\\/([\\w-\\.]+)\\/(?:(?:-\\/)?(?:blob\\/|raw\\/)?([\\w]+)\\/)([\\w\\/\\-\\.]+\\.([\\w]+))/gm;\n    return GitPath._execRegex(regex, url);\n  },\n  _execRegex: (regex, str) => {\n    let m,\n        groups = {},\n        map = ['valid', 'ns', 'owner', 'repo', 'branch', 'path', 'type', 'resource'];\n\n    while ((m = regex.exec(str)) !== null) {\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      m.forEach((match, groupIndex) => {\n        groups[map[groupIndex]] = match;\n      });\n    }\n\n    groups.valid = GitPath.isValid(groups);\n    return groups;\n  },\n  fromUrl: url => {\n    let data = GitPath._parseUrl(url);\n\n    if (!GitPath.isValid(data)) return null;\n    data.branch = data.branch && data.branch != 'master' ? ':' + data.branch : '';\n    return \"@\".concat(data.ns, \"/\").concat(data.owner, \"/\").concat(data.repo).concat(data.branch, \"/\").concat(data.path);\n  },\n  toUrl: (path, raw = false) => {\n    let data = typeof path == 'object' ? path : GitPath.parse(path);\n    if (!GitPath.isValid(data)) return null;\n    data.branch = data.branch || 'master';\n\n    if (!data.ns || data.ns == 'github') {\n      data.server = raw ? 'raw.githubusercontent.com' : 'github.com';\n      data.format = raw ? '' : 'blob/';\n      return \"https://\".concat(data.server, \"/\").concat(data.owner, \"/\").concat(data.repo, \"/\").concat(data.format + data.branch, \"/\").concat(data.path);\n    }\n\n    data.server = data.server || 'gitlab.com';\n    data.format = raw ? 'raw' : 'blob';\n    return \"https://\".concat(data.server, \"/\").concat(data.owner, \"/\").concat(data.repo, \"/-/\").concat(data.format, \"/\").concat(data.branch, \"/\").concat(data.path);\n  },\n  toApi: path => {\n    let data = typeof path == 'object' ? path : GitPath.parse(path);\n    if (!GitPath.isValid(data)) return null;\n\n    if (!data.ns || data.ns == 'github') {\n      data.server = 'api.github.com';\n      return \"https://\".concat(data.server, \"/repos/\").concat(data.owner, \"/\").concat(data.repo, \"/contents/\").concat(data.path);\n    }\n\n    data.server = data.server || 'gitlab.com';\n    data.project = encodeURIComponent(data.owner + '/' + data.repo);\n    data.path = encodeURIComponent(data.path);\n    return \"https://\".concat(data.server, \"/api/v4/projects/\").concat(data.project, \"/repository/files/\").concat(data.path);\n  },\n  isValid: obj => {\n    if (typeof obj.type == 'undefined' || !['csv', 'json', 'yaml'].includes(obj.type.toLowerCase())) return false;\n    let mandatory = ['ns', 'owner', 'repo', 'path'];\n    return mandatory.every(x => x in obj && obj[x]);\n  },\n  isUrl: url => {\n    /*\n    *\t@see https://gist.github.com/dperini/729294\n    *\tMIT Â© Diego Perini\n    */\n    const regex = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n    return regex.test(url);\n  }\n};\nvar _default = GitPath;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}